directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

type Item implements Node {
  id: ID!
  name: String!
  slug: String!
  tags: [Tag!]!
  sublabel: SubLabel
  # We would like to perform custom ordering for shopping items
  purchases(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
  ): ShoppingItemConnection @goField(forceResolver: true)
}

input ItemInput {
  name: String!
}

input ShoppingItemInput {
  quantity: Float
  quantityType: String
  units: Int = 1
  brand: String 
  pricePerUnit: Decimal!
  # Add a validator for checking the provided id for an item exists
  item: String!
}

input ShoppingInput {
  date: Time
  vendor: VendorInput!
  items: [ShoppingItemInput!]!
}

type ShoppingItem implements Node {
  id: ID!
  quantity: Float
  quantityType: String
  units: Int!
  brand: String 
  pricePerUnit: Decimal!
  item: Item!
  shopping: Shopping!
  total: Decimal!
}

type ShoppingItemConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ShoppingItemEdge]
}

type ShoppingItemEdge {
  node: ShoppingItem
  cursor: Cursor!
}

type Shopping implements Node {
  id: ID!
  date: Time!
  vendor: Vendor!
  total: Decimal!
  items: [ShoppingItem!]!
}

type Vendor implements Node {
  id: ID!
  name: String!
  slug: String!
  purchases: [Shopping!]!
}

input VendorInput  {
  name: String!
}

type Tag implements Node {
  id: ID!
  name: String!
  children: [SubLabel!]!
}

input TagInput {
  name: String!
}

type SubLabel implements Node {
  id: ID!
  name: String!
  items: [Item!]!
}

input SubLabelInput {
  name: String!
}

type ShoppingList implements Node {
  id: ID!
  name: String!
  createTime: Time!
  updateTime: Time!
  items: [ShoppingListItem!]!
}

type ShoppingListItem implements Node {
  id: ID!
  item: Item!
  purchase: ShoppingItem
}

input ShoppingListInput {
  name: String!
  items: [ShoppingListItemInput!]!
}

input ShoppingListItemInput {
  item: Int!
}

type ShoppingListConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ShoppingListEdge]
}

type ShoppingListEdge {
  node: ShoppingList
  cursor: Cursor!
}

input CreatePurchaseFromShoppingList {
  shoppingItem: Int!
  units: Int = 1
  pricePerUnit: Decimal!
  quantity: Float
  quantityType: String
  brand: String 
}
