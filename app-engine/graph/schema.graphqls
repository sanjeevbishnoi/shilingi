scalar Time
scalar Decimal

interface Node {
  id: ID!
}

type Query {
  # Retrieve a list of items. If tagID is provided, filter out items labeled with
  # the tag. If both negate and tagID are provided, returns items that don't have
  # label
  # Providing negate without a tagID doesn't have any effect
  items(tagID: Int, negate: Boolean): [Item!]!
  shoppingItems(after: Time!, before: Time!, itemID: Int!): [ShoppingItem!]!
  # Returns shopping items acquired between the date range that are tagged by 
  # tagID
  shoppingItemsByTag(after: Time!, before: Time!, tagID: Int!): [ShoppingItem!]!
  untaggedShoppingItems(after: Time!, before: Time!): [ShoppingItem!]
  purchases(before: Time!, after: Time!): [Shopping!]!
  vendors: [Vendor!]!
  node(id: Int!): Node!
  tags: [Tag!]!
}

type Mutation {
  createItem(input: ItemInput!): Item
  createPurchase(input: ShoppingInput!): Shopping
  tagItems(itemIDs: [Int!]!, tagID: Int!): [Int!]!
  untagItems(itemIDs: [Int!]!, tagID: Int!): Tag!
  createTag(input: TagInput!): Tag!
  editTag(id: Int!, input: TagInput!): Tag!
  editItem(id: Int!, input: ItemInput!): Item!
  deleteTag(id: Int!): Boolean!
  createSubLabel(tagID: Int!, input: SubLabelInput!): SubLabel!
  addItemsToSubLabel(subLabelID: Int!, itemIDs: [Int!]!): SubLabel!
  removeItemsFromSubLabel(subLabelID: Int!, itemIDs: [Int!]!): SubLabel!
  editSubLabel(subLabelID: Int!, input: SubLabelInput!): SubLabel!
  deleteSubLabel(subLabelID: Int!): Boolean!
  createShoppingList(input: ShoppingListInput!): ShoppingList!
}
