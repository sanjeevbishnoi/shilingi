// Code generated by entc, DO NOT EDIT.

package item

import (
	"time"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// EdgePurchases holds the string denoting the purchases edge name in mutations.
	EdgePurchases = "purchases"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeSublabel holds the string denoting the sublabel edge name in mutations.
	EdgeSublabel = "sublabel"
	// EdgeShoppingList holds the string denoting the shoppinglist edge name in mutations.
	EdgeShoppingList = "shoppingList"
	// Table holds the table name of the item in the database.
	Table = "items"
	// PurchasesTable is the table that holds the purchases relation/edge.
	PurchasesTable = "shopping_items"
	// PurchasesInverseTable is the table name for the ShoppingItem entity.
	// It exists in this package in order to avoid circular dependency with the "shoppingitem" package.
	PurchasesInverseTable = "shopping_items"
	// PurchasesColumn is the table column denoting the purchases relation/edge.
	PurchasesColumn = "item_purchases"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "item_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// SublabelTable is the table that holds the sublabel relation/edge.
	SublabelTable = "items"
	// SublabelInverseTable is the table name for the SubLabel entity.
	// It exists in this package in order to avoid circular dependency with the "sublabel" package.
	SublabelInverseTable = "sub_labels"
	// SublabelColumn is the table column denoting the sublabel relation/edge.
	SublabelColumn = "sub_label_items"
	// ShoppingListTable is the table that holds the shoppingList relation/edge.
	ShoppingListTable = "shopping_list_items"
	// ShoppingListInverseTable is the table name for the ShoppingListItem entity.
	// It exists in this package in order to avoid circular dependency with the "shoppinglistitem" package.
	ShoppingListInverseTable = "shopping_list_items"
	// ShoppingListColumn is the table column denoting the shoppingList relation/edge.
	ShoppingListColumn = "item_shopping_list"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldSlug,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sub_label_items",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"item_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
)
