// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/kingzbauer/shilingi/app-engine/ent/migrate"

	"github.com/kingzbauer/shilingi/app-engine/ent/item"
	"github.com/kingzbauer/shilingi/app-engine/ent/shopping"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppingitem"
	"github.com/kingzbauer/shilingi/app-engine/ent/sublabel"
	"github.com/kingzbauer/shilingi/app-engine/ent/tag"
	"github.com/kingzbauer/shilingi/app-engine/ent/vendor"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Item is the client for interacting with the Item builders.
	Item *ItemClient
	// Shopping is the client for interacting with the Shopping builders.
	Shopping *ShoppingClient
	// ShoppingItem is the client for interacting with the ShoppingItem builders.
	ShoppingItem *ShoppingItemClient
	// SubLabel is the client for interacting with the SubLabel builders.
	SubLabel *SubLabelClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// Vendor is the client for interacting with the Vendor builders.
	Vendor *VendorClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Item = NewItemClient(c.config)
	c.Shopping = NewShoppingClient(c.config)
	c.ShoppingItem = NewShoppingItemClient(c.config)
	c.SubLabel = NewSubLabelClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.Vendor = NewVendorClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Item:         NewItemClient(cfg),
		Shopping:     NewShoppingClient(cfg),
		ShoppingItem: NewShoppingItemClient(cfg),
		SubLabel:     NewSubLabelClient(cfg),
		Tag:          NewTagClient(cfg),
		Vendor:       NewVendorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:       cfg,
		Item:         NewItemClient(cfg),
		Shopping:     NewShoppingClient(cfg),
		ShoppingItem: NewShoppingItemClient(cfg),
		SubLabel:     NewSubLabelClient(cfg),
		Tag:          NewTagClient(cfg),
		Vendor:       NewVendorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Item.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Item.Use(hooks...)
	c.Shopping.Use(hooks...)
	c.ShoppingItem.Use(hooks...)
	c.SubLabel.Use(hooks...)
	c.Tag.Use(hooks...)
	c.Vendor.Use(hooks...)
}

// ItemClient is a client for the Item schema.
type ItemClient struct {
	config
}

// NewItemClient returns a client for the Item from the given config.
func NewItemClient(c config) *ItemClient {
	return &ItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `item.Hooks(f(g(h())))`.
func (c *ItemClient) Use(hooks ...Hook) {
	c.hooks.Item = append(c.hooks.Item, hooks...)
}

// Create returns a create builder for Item.
func (c *ItemClient) Create() *ItemCreate {
	mutation := newItemMutation(c.config, OpCreate)
	return &ItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Item entities.
func (c *ItemClient) CreateBulk(builders ...*ItemCreate) *ItemCreateBulk {
	return &ItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Item.
func (c *ItemClient) Update() *ItemUpdate {
	mutation := newItemMutation(c.config, OpUpdate)
	return &ItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ItemClient) UpdateOne(i *Item) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItem(i))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ItemClient) UpdateOneID(id int) *ItemUpdateOne {
	mutation := newItemMutation(c.config, OpUpdateOne, withItemID(id))
	return &ItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Item.
func (c *ItemClient) Delete() *ItemDelete {
	mutation := newItemMutation(c.config, OpDelete)
	return &ItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ItemClient) DeleteOne(i *Item) *ItemDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ItemClient) DeleteOneID(id int) *ItemDeleteOne {
	builder := c.Delete().Where(item.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ItemDeleteOne{builder}
}

// Query returns a query builder for Item.
func (c *ItemClient) Query() *ItemQuery {
	return &ItemQuery{
		config: c.config,
	}
}

// Get returns a Item entity by its id.
func (c *ItemClient) Get(ctx context.Context, id int) (*Item, error) {
	return c.Query().Where(item.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ItemClient) GetX(ctx context.Context, id int) *Item {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPurchases queries the purchases edge of a Item.
func (c *ItemClient) QueryPurchases(i *Item) *ShoppingItemQuery {
	query := &ShoppingItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(shoppingitem.Table, shoppingitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, item.PurchasesTable, item.PurchasesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Item.
func (c *ItemClient) QueryTags(i *Item) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, item.TagsTable, item.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySublabel queries the sublabel edge of a Item.
func (c *ItemClient) QuerySublabel(i *Item) *SubLabelQuery {
	query := &SubLabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(item.Table, item.FieldID, id),
			sqlgraph.To(sublabel.Table, sublabel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, item.SublabelTable, item.SublabelColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ItemClient) Hooks() []Hook {
	return c.hooks.Item
}

// ShoppingClient is a client for the Shopping schema.
type ShoppingClient struct {
	config
}

// NewShoppingClient returns a client for the Shopping from the given config.
func NewShoppingClient(c config) *ShoppingClient {
	return &ShoppingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shopping.Hooks(f(g(h())))`.
func (c *ShoppingClient) Use(hooks ...Hook) {
	c.hooks.Shopping = append(c.hooks.Shopping, hooks...)
}

// Create returns a create builder for Shopping.
func (c *ShoppingClient) Create() *ShoppingCreate {
	mutation := newShoppingMutation(c.config, OpCreate)
	return &ShoppingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Shopping entities.
func (c *ShoppingClient) CreateBulk(builders ...*ShoppingCreate) *ShoppingCreateBulk {
	return &ShoppingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Shopping.
func (c *ShoppingClient) Update() *ShoppingUpdate {
	mutation := newShoppingMutation(c.config, OpUpdate)
	return &ShoppingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShoppingClient) UpdateOne(s *Shopping) *ShoppingUpdateOne {
	mutation := newShoppingMutation(c.config, OpUpdateOne, withShopping(s))
	return &ShoppingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShoppingClient) UpdateOneID(id int) *ShoppingUpdateOne {
	mutation := newShoppingMutation(c.config, OpUpdateOne, withShoppingID(id))
	return &ShoppingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Shopping.
func (c *ShoppingClient) Delete() *ShoppingDelete {
	mutation := newShoppingMutation(c.config, OpDelete)
	return &ShoppingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShoppingClient) DeleteOne(s *Shopping) *ShoppingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShoppingClient) DeleteOneID(id int) *ShoppingDeleteOne {
	builder := c.Delete().Where(shopping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShoppingDeleteOne{builder}
}

// Query returns a query builder for Shopping.
func (c *ShoppingClient) Query() *ShoppingQuery {
	return &ShoppingQuery{
		config: c.config,
	}
}

// Get returns a Shopping entity by its id.
func (c *ShoppingClient) Get(ctx context.Context, id int) (*Shopping, error) {
	return c.Query().Where(shopping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShoppingClient) GetX(ctx context.Context, id int) *Shopping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItems queries the items edge of a Shopping.
func (c *ShoppingClient) QueryItems(s *Shopping) *ShoppingItemQuery {
	query := &ShoppingItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shopping.Table, shopping.FieldID, id),
			sqlgraph.To(shoppingitem.Table, shoppingitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shopping.ItemsTable, shopping.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVendor queries the vendor edge of a Shopping.
func (c *ShoppingClient) QueryVendor(s *Shopping) *VendorQuery {
	query := &VendorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shopping.Table, shopping.FieldID, id),
			sqlgraph.To(vendor.Table, vendor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shopping.VendorTable, shopping.VendorColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShoppingClient) Hooks() []Hook {
	return c.hooks.Shopping
}

// ShoppingItemClient is a client for the ShoppingItem schema.
type ShoppingItemClient struct {
	config
}

// NewShoppingItemClient returns a client for the ShoppingItem from the given config.
func NewShoppingItemClient(c config) *ShoppingItemClient {
	return &ShoppingItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shoppingitem.Hooks(f(g(h())))`.
func (c *ShoppingItemClient) Use(hooks ...Hook) {
	c.hooks.ShoppingItem = append(c.hooks.ShoppingItem, hooks...)
}

// Create returns a create builder for ShoppingItem.
func (c *ShoppingItemClient) Create() *ShoppingItemCreate {
	mutation := newShoppingItemMutation(c.config, OpCreate)
	return &ShoppingItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShoppingItem entities.
func (c *ShoppingItemClient) CreateBulk(builders ...*ShoppingItemCreate) *ShoppingItemCreateBulk {
	return &ShoppingItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShoppingItem.
func (c *ShoppingItemClient) Update() *ShoppingItemUpdate {
	mutation := newShoppingItemMutation(c.config, OpUpdate)
	return &ShoppingItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShoppingItemClient) UpdateOne(si *ShoppingItem) *ShoppingItemUpdateOne {
	mutation := newShoppingItemMutation(c.config, OpUpdateOne, withShoppingItem(si))
	return &ShoppingItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShoppingItemClient) UpdateOneID(id int) *ShoppingItemUpdateOne {
	mutation := newShoppingItemMutation(c.config, OpUpdateOne, withShoppingItemID(id))
	return &ShoppingItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShoppingItem.
func (c *ShoppingItemClient) Delete() *ShoppingItemDelete {
	mutation := newShoppingItemMutation(c.config, OpDelete)
	return &ShoppingItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShoppingItemClient) DeleteOne(si *ShoppingItem) *ShoppingItemDeleteOne {
	return c.DeleteOneID(si.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShoppingItemClient) DeleteOneID(id int) *ShoppingItemDeleteOne {
	builder := c.Delete().Where(shoppingitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShoppingItemDeleteOne{builder}
}

// Query returns a query builder for ShoppingItem.
func (c *ShoppingItemClient) Query() *ShoppingItemQuery {
	return &ShoppingItemQuery{
		config: c.config,
	}
}

// Get returns a ShoppingItem entity by its id.
func (c *ShoppingItemClient) Get(ctx context.Context, id int) (*ShoppingItem, error) {
	return c.Query().Where(shoppingitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShoppingItemClient) GetX(ctx context.Context, id int) *ShoppingItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItem queries the item edge of a ShoppingItem.
func (c *ShoppingItemClient) QueryItem(si *ShoppingItem) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shoppingitem.Table, shoppingitem.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shoppingitem.ItemTable, shoppingitem.ItemColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShopping queries the shopping edge of a ShoppingItem.
func (c *ShoppingItemClient) QueryShopping(si *ShoppingItem) *ShoppingQuery {
	query := &ShoppingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := si.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shoppingitem.Table, shoppingitem.FieldID, id),
			sqlgraph.To(shopping.Table, shopping.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shoppingitem.ShoppingTable, shoppingitem.ShoppingColumn),
		)
		fromV = sqlgraph.Neighbors(si.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShoppingItemClient) Hooks() []Hook {
	return c.hooks.ShoppingItem
}

// SubLabelClient is a client for the SubLabel schema.
type SubLabelClient struct {
	config
}

// NewSubLabelClient returns a client for the SubLabel from the given config.
func NewSubLabelClient(c config) *SubLabelClient {
	return &SubLabelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sublabel.Hooks(f(g(h())))`.
func (c *SubLabelClient) Use(hooks ...Hook) {
	c.hooks.SubLabel = append(c.hooks.SubLabel, hooks...)
}

// Create returns a create builder for SubLabel.
func (c *SubLabelClient) Create() *SubLabelCreate {
	mutation := newSubLabelMutation(c.config, OpCreate)
	return &SubLabelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubLabel entities.
func (c *SubLabelClient) CreateBulk(builders ...*SubLabelCreate) *SubLabelCreateBulk {
	return &SubLabelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubLabel.
func (c *SubLabelClient) Update() *SubLabelUpdate {
	mutation := newSubLabelMutation(c.config, OpUpdate)
	return &SubLabelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubLabelClient) UpdateOne(sl *SubLabel) *SubLabelUpdateOne {
	mutation := newSubLabelMutation(c.config, OpUpdateOne, withSubLabel(sl))
	return &SubLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubLabelClient) UpdateOneID(id int) *SubLabelUpdateOne {
	mutation := newSubLabelMutation(c.config, OpUpdateOne, withSubLabelID(id))
	return &SubLabelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubLabel.
func (c *SubLabelClient) Delete() *SubLabelDelete {
	mutation := newSubLabelMutation(c.config, OpDelete)
	return &SubLabelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SubLabelClient) DeleteOne(sl *SubLabel) *SubLabelDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SubLabelClient) DeleteOneID(id int) *SubLabelDeleteOne {
	builder := c.Delete().Where(sublabel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubLabelDeleteOne{builder}
}

// Query returns a query builder for SubLabel.
func (c *SubLabelClient) Query() *SubLabelQuery {
	return &SubLabelQuery{
		config: c.config,
	}
}

// Get returns a SubLabel entity by its id.
func (c *SubLabelClient) Get(ctx context.Context, id int) (*SubLabel, error) {
	return c.Query().Where(sublabel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubLabelClient) GetX(ctx context.Context, id int) *SubLabel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a SubLabel.
func (c *SubLabelClient) QueryParent(sl *SubLabel) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sublabel.Table, sublabel.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sublabel.ParentTable, sublabel.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryItems queries the items edge of a SubLabel.
func (c *SubLabelClient) QueryItems(sl *SubLabel) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sublabel.Table, sublabel.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sublabel.ItemsTable, sublabel.ItemsColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubLabelClient) Hooks() []Hook {
	return c.hooks.SubLabel
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryItems queries the items edge of a Tag.
func (c *TagClient) QueryItems(t *Tag) *ItemQuery {
	query := &ItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(item.Table, item.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.ItemsTable, tag.ItemsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Tag.
func (c *TagClient) QueryChildren(t *Tag) *SubLabelQuery {
	query := &SubLabelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(sublabel.Table, sublabel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tag.ChildrenTable, tag.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	hooks := c.hooks.Tag
	return append(hooks[:len(hooks):len(hooks)], tag.Hooks[:]...)
}

// VendorClient is a client for the Vendor schema.
type VendorClient struct {
	config
}

// NewVendorClient returns a client for the Vendor from the given config.
func NewVendorClient(c config) *VendorClient {
	return &VendorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vendor.Hooks(f(g(h())))`.
func (c *VendorClient) Use(hooks ...Hook) {
	c.hooks.Vendor = append(c.hooks.Vendor, hooks...)
}

// Create returns a create builder for Vendor.
func (c *VendorClient) Create() *VendorCreate {
	mutation := newVendorMutation(c.config, OpCreate)
	return &VendorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vendor entities.
func (c *VendorClient) CreateBulk(builders ...*VendorCreate) *VendorCreateBulk {
	return &VendorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vendor.
func (c *VendorClient) Update() *VendorUpdate {
	mutation := newVendorMutation(c.config, OpUpdate)
	return &VendorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VendorClient) UpdateOne(v *Vendor) *VendorUpdateOne {
	mutation := newVendorMutation(c.config, OpUpdateOne, withVendor(v))
	return &VendorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VendorClient) UpdateOneID(id int) *VendorUpdateOne {
	mutation := newVendorMutation(c.config, OpUpdateOne, withVendorID(id))
	return &VendorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vendor.
func (c *VendorClient) Delete() *VendorDelete {
	mutation := newVendorMutation(c.config, OpDelete)
	return &VendorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VendorClient) DeleteOne(v *Vendor) *VendorDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VendorClient) DeleteOneID(id int) *VendorDeleteOne {
	builder := c.Delete().Where(vendor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VendorDeleteOne{builder}
}

// Query returns a query builder for Vendor.
func (c *VendorClient) Query() *VendorQuery {
	return &VendorQuery{
		config: c.config,
	}
}

// Get returns a Vendor entity by its id.
func (c *VendorClient) Get(ctx context.Context, id int) (*Vendor, error) {
	return c.Query().Where(vendor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VendorClient) GetX(ctx context.Context, id int) *Vendor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPurchases queries the purchases edge of a Vendor.
func (c *VendorClient) QueryPurchases(v *Vendor) *ShoppingQuery {
	query := &ShoppingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vendor.Table, vendor.FieldID, id),
			sqlgraph.To(shopping.Table, shopping.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vendor.PurchasesTable, vendor.PurchasesColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VendorClient) Hooks() []Hook {
	return c.hooks.Vendor
}
