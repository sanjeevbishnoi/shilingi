// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kingzbauer/shilingi/app-engine/ent/vendor"
)

// Vendor is the model entity for the Vendor schema.
type Vendor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VendorQuery when eager-loading is set.
	Edges VendorEdges `json:"edges"`
}

// VendorEdges holds the relations/edges for other nodes in the graph.
type VendorEdges struct {
	// Purchases holds the value of the purchases edge.
	Purchases []*Shopping `json:"purchases,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PurchasesOrErr returns the Purchases value or an error if the edge
// was not loaded in eager-loading.
func (e VendorEdges) PurchasesOrErr() ([]*Shopping, error) {
	if e.loadedTypes[0] {
		return e.Purchases, nil
	}
	return nil, &NotLoadedError{edge: "purchases"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vendor) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			values[i] = new(sql.NullInt64)
		case vendor.FieldName, vendor.FieldSlug:
			values[i] = new(sql.NullString)
		case vendor.FieldCreateTime, vendor.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vendor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vendor fields.
func (v *Vendor) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vendor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vendor.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				v.CreateTime = value.Time
			}
		case vendor.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				v.UpdateTime = value.Time
			}
		case vendor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case vendor.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				v.Slug = value.String
			}
		}
	}
	return nil
}

// QueryPurchases queries the "purchases" edge of the Vendor entity.
func (v *Vendor) QueryPurchases() *ShoppingQuery {
	return (&VendorClient{config: v.config}).QueryPurchases(v)
}

// Update returns a builder for updating this Vendor.
// Note that you need to call Vendor.Unwrap() before calling this method if this Vendor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vendor) Update() *VendorUpdateOne {
	return (&VendorClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vendor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vendor) Unwrap() *Vendor {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vendor is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vendor) String() string {
	var builder strings.Builder
	builder.WriteString("Vendor(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(v.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(v.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(v.Name)
	builder.WriteString(", slug=")
	builder.WriteString(v.Slug)
	builder.WriteByte(')')
	return builder.String()
}

// Vendors is a parsable slice of Vendor.
type Vendors []*Vendor

func (v Vendors) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
