// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/account"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountinvite"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountmember"
	"github.com/kingzbauer/shilingi/app-engine/ent/predicate"
	"github.com/kingzbauer/shilingi/app-engine/ent/user"
)

// AccountInviteUpdate is the builder for updating AccountInvite entities.
type AccountInviteUpdate struct {
	config
	hooks    []Hook
	mutation *AccountInviteMutation
}

// Where appends a list predicates to the AccountInviteUpdate builder.
func (aiu *AccountInviteUpdate) Where(ps ...predicate.AccountInvite) *AccountInviteUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetEmail sets the "email" field.
func (aiu *AccountInviteUpdate) SetEmail(s string) *AccountInviteUpdate {
	aiu.mutation.SetEmail(s)
	return aiu
}

// SetStatus sets the "status" field.
func (aiu *AccountInviteUpdate) SetStatus(a accountinvite.Status) *AccountInviteUpdate {
	aiu.mutation.SetStatus(a)
	return aiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiu *AccountInviteUpdate) SetNillableStatus(a *accountinvite.Status) *AccountInviteUpdate {
	if a != nil {
		aiu.SetStatus(*a)
	}
	return aiu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (aiu *AccountInviteUpdate) SetAccountID(id int) *AccountInviteUpdate {
	aiu.mutation.SetAccountID(id)
	return aiu
}

// SetAccount sets the "account" edge to the Account entity.
func (aiu *AccountInviteUpdate) SetAccount(a *Account) *AccountInviteUpdate {
	return aiu.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (aiu *AccountInviteUpdate) SetUserID(id int) *AccountInviteUpdate {
	aiu.mutation.SetUserID(id)
	return aiu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (aiu *AccountInviteUpdate) SetNillableUserID(id *int) *AccountInviteUpdate {
	if id != nil {
		aiu = aiu.SetUserID(*id)
	}
	return aiu
}

// SetUser sets the "user" edge to the User entity.
func (aiu *AccountInviteUpdate) SetUser(u *User) *AccountInviteUpdate {
	return aiu.SetUserID(u.ID)
}

// SetMemberID sets the "member" edge to the AccountMember entity by ID.
func (aiu *AccountInviteUpdate) SetMemberID(id int) *AccountInviteUpdate {
	aiu.mutation.SetMemberID(id)
	return aiu
}

// SetNillableMemberID sets the "member" edge to the AccountMember entity by ID if the given value is not nil.
func (aiu *AccountInviteUpdate) SetNillableMemberID(id *int) *AccountInviteUpdate {
	if id != nil {
		aiu = aiu.SetMemberID(*id)
	}
	return aiu
}

// SetMember sets the "member" edge to the AccountMember entity.
func (aiu *AccountInviteUpdate) SetMember(a *AccountMember) *AccountInviteUpdate {
	return aiu.SetMemberID(a.ID)
}

// Mutation returns the AccountInviteMutation object of the builder.
func (aiu *AccountInviteUpdate) Mutation() *AccountInviteMutation {
	return aiu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (aiu *AccountInviteUpdate) ClearAccount() *AccountInviteUpdate {
	aiu.mutation.ClearAccount()
	return aiu
}

// ClearUser clears the "user" edge to the User entity.
func (aiu *AccountInviteUpdate) ClearUser() *AccountInviteUpdate {
	aiu.mutation.ClearUser()
	return aiu
}

// ClearMember clears the "member" edge to the AccountMember entity.
func (aiu *AccountInviteUpdate) ClearMember() *AccountInviteUpdate {
	aiu.mutation.ClearMember()
	return aiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *AccountInviteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aiu.defaults()
	if len(aiu.hooks) == 0 {
		if err = aiu.check(); err != nil {
			return 0, err
		}
		affected, err = aiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountInviteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aiu.check(); err != nil {
				return 0, err
			}
			aiu.mutation = mutation
			affected, err = aiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aiu.hooks) - 1; i >= 0; i-- {
			if aiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *AccountInviteUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *AccountInviteUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *AccountInviteUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiu *AccountInviteUpdate) defaults() {
	if _, ok := aiu.mutation.UpdateTime(); !ok {
		v := accountinvite.UpdateDefaultUpdateTime()
		aiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *AccountInviteUpdate) check() error {
	if v, ok := aiu.mutation.Status(); ok {
		if err := accountinvite.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := aiu.mutation.AccountID(); aiu.mutation.AccountCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"account\"")
	}
	return nil
}

func (aiu *AccountInviteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountinvite.Table,
			Columns: accountinvite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountinvite.FieldID,
			},
		},
	}
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountinvite.FieldUpdateTime,
		})
	}
	if value, ok := aiu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountinvite.FieldEmail,
		})
	}
	if value, ok := aiu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountinvite.FieldStatus,
		})
	}
	if aiu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.AccountTable,
			Columns: []string{accountinvite.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.AccountTable,
			Columns: []string{accountinvite.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.UserTable,
			Columns: []string{accountinvite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.UserTable,
			Columns: []string{accountinvite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.MemberTable,
			Columns: []string{accountinvite.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.MemberTable,
			Columns: []string{accountinvite.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountinvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AccountInviteUpdateOne is the builder for updating a single AccountInvite entity.
type AccountInviteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountInviteMutation
}

// SetEmail sets the "email" field.
func (aiuo *AccountInviteUpdateOne) SetEmail(s string) *AccountInviteUpdateOne {
	aiuo.mutation.SetEmail(s)
	return aiuo
}

// SetStatus sets the "status" field.
func (aiuo *AccountInviteUpdateOne) SetStatus(a accountinvite.Status) *AccountInviteUpdateOne {
	aiuo.mutation.SetStatus(a)
	return aiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aiuo *AccountInviteUpdateOne) SetNillableStatus(a *accountinvite.Status) *AccountInviteUpdateOne {
	if a != nil {
		aiuo.SetStatus(*a)
	}
	return aiuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (aiuo *AccountInviteUpdateOne) SetAccountID(id int) *AccountInviteUpdateOne {
	aiuo.mutation.SetAccountID(id)
	return aiuo
}

// SetAccount sets the "account" edge to the Account entity.
func (aiuo *AccountInviteUpdateOne) SetAccount(a *Account) *AccountInviteUpdateOne {
	return aiuo.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (aiuo *AccountInviteUpdateOne) SetUserID(id int) *AccountInviteUpdateOne {
	aiuo.mutation.SetUserID(id)
	return aiuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (aiuo *AccountInviteUpdateOne) SetNillableUserID(id *int) *AccountInviteUpdateOne {
	if id != nil {
		aiuo = aiuo.SetUserID(*id)
	}
	return aiuo
}

// SetUser sets the "user" edge to the User entity.
func (aiuo *AccountInviteUpdateOne) SetUser(u *User) *AccountInviteUpdateOne {
	return aiuo.SetUserID(u.ID)
}

// SetMemberID sets the "member" edge to the AccountMember entity by ID.
func (aiuo *AccountInviteUpdateOne) SetMemberID(id int) *AccountInviteUpdateOne {
	aiuo.mutation.SetMemberID(id)
	return aiuo
}

// SetNillableMemberID sets the "member" edge to the AccountMember entity by ID if the given value is not nil.
func (aiuo *AccountInviteUpdateOne) SetNillableMemberID(id *int) *AccountInviteUpdateOne {
	if id != nil {
		aiuo = aiuo.SetMemberID(*id)
	}
	return aiuo
}

// SetMember sets the "member" edge to the AccountMember entity.
func (aiuo *AccountInviteUpdateOne) SetMember(a *AccountMember) *AccountInviteUpdateOne {
	return aiuo.SetMemberID(a.ID)
}

// Mutation returns the AccountInviteMutation object of the builder.
func (aiuo *AccountInviteUpdateOne) Mutation() *AccountInviteMutation {
	return aiuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (aiuo *AccountInviteUpdateOne) ClearAccount() *AccountInviteUpdateOne {
	aiuo.mutation.ClearAccount()
	return aiuo
}

// ClearUser clears the "user" edge to the User entity.
func (aiuo *AccountInviteUpdateOne) ClearUser() *AccountInviteUpdateOne {
	aiuo.mutation.ClearUser()
	return aiuo
}

// ClearMember clears the "member" edge to the AccountMember entity.
func (aiuo *AccountInviteUpdateOne) ClearMember() *AccountInviteUpdateOne {
	aiuo.mutation.ClearMember()
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *AccountInviteUpdateOne) Select(field string, fields ...string) *AccountInviteUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated AccountInvite entity.
func (aiuo *AccountInviteUpdateOne) Save(ctx context.Context) (*AccountInvite, error) {
	var (
		err  error
		node *AccountInvite
	)
	aiuo.defaults()
	if len(aiuo.hooks) == 0 {
		if err = aiuo.check(); err != nil {
			return nil, err
		}
		node, err = aiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountInviteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aiuo.check(); err != nil {
				return nil, err
			}
			aiuo.mutation = mutation
			node, err = aiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aiuo.hooks) - 1; i >= 0; i-- {
			if aiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *AccountInviteUpdateOne) SaveX(ctx context.Context) *AccountInvite {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *AccountInviteUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *AccountInviteUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aiuo *AccountInviteUpdateOne) defaults() {
	if _, ok := aiuo.mutation.UpdateTime(); !ok {
		v := accountinvite.UpdateDefaultUpdateTime()
		aiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *AccountInviteUpdateOne) check() error {
	if v, ok := aiuo.mutation.Status(); ok {
		if err := accountinvite.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	if _, ok := aiuo.mutation.AccountID(); aiuo.mutation.AccountCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"account\"")
	}
	return nil
}

func (aiuo *AccountInviteUpdateOne) sqlSave(ctx context.Context) (_node *AccountInvite, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountinvite.Table,
			Columns: accountinvite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountinvite.FieldID,
			},
		},
	}
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AccountInvite.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountinvite.FieldID)
		for _, f := range fields {
			if !accountinvite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountinvite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountinvite.FieldUpdateTime,
		})
	}
	if value, ok := aiuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountinvite.FieldEmail,
		})
	}
	if value, ok := aiuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountinvite.FieldStatus,
		})
	}
	if aiuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.AccountTable,
			Columns: []string{accountinvite.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.AccountTable,
			Columns: []string{accountinvite.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.UserTable,
			Columns: []string{accountinvite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.UserTable,
			Columns: []string{accountinvite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.MemberTable,
			Columns: []string{accountinvite.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountmember.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.MemberTable,
			Columns: []string{accountinvite.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountInvite{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountinvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
