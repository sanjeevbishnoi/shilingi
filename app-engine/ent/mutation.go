// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/kingzbauer/shilingi/app-engine/ent/item"
	"github.com/kingzbauer/shilingi/app-engine/ent/predicate"
	"github.com/kingzbauer/shilingi/app-engine/ent/shopping"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppingitem"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglist"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglistitem"
	"github.com/kingzbauer/shilingi/app-engine/ent/sublabel"
	"github.com/kingzbauer/shilingi/app-engine/ent/tag"
	"github.com/kingzbauer/shilingi/app-engine/ent/vendor"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem             = "Item"
	TypeShopping         = "Shopping"
	TypeShoppingItem     = "ShoppingItem"
	TypeShoppingList     = "ShoppingList"
	TypeShoppingListItem = "ShoppingListItem"
	TypeSubLabel         = "SubLabel"
	TypeTag              = "Tag"
	TypeVendor           = "Vendor"
)

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	create_time         *time.Time
	update_time         *time.Time
	name                *string
	slug                *string
	clearedFields       map[string]struct{}
	purchases           map[int]struct{}
	removedpurchases    map[int]struct{}
	clearedpurchases    bool
	tags                map[int]struct{}
	removedtags         map[int]struct{}
	clearedtags         bool
	sublabel            *int
	clearedsublabel     bool
	shoppingList        map[int]struct{}
	removedshoppingList map[int]struct{}
	clearedshoppingList bool
	done                bool
	oldValue            func(context.Context) (*Item, error)
	predicates          []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *ItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ItemMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *ItemMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *ItemMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *ItemMutation) ResetSlug() {
	m.slug = nil
}

// AddPurchaseIDs adds the "purchases" edge to the ShoppingItem entity by ids.
func (m *ItemMutation) AddPurchaseIDs(ids ...int) {
	if m.purchases == nil {
		m.purchases = make(map[int]struct{})
	}
	for i := range ids {
		m.purchases[ids[i]] = struct{}{}
	}
}

// ClearPurchases clears the "purchases" edge to the ShoppingItem entity.
func (m *ItemMutation) ClearPurchases() {
	m.clearedpurchases = true
}

// PurchasesCleared reports if the "purchases" edge to the ShoppingItem entity was cleared.
func (m *ItemMutation) PurchasesCleared() bool {
	return m.clearedpurchases
}

// RemovePurchaseIDs removes the "purchases" edge to the ShoppingItem entity by IDs.
func (m *ItemMutation) RemovePurchaseIDs(ids ...int) {
	if m.removedpurchases == nil {
		m.removedpurchases = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.purchases, ids[i])
		m.removedpurchases[ids[i]] = struct{}{}
	}
}

// RemovedPurchases returns the removed IDs of the "purchases" edge to the ShoppingItem entity.
func (m *ItemMutation) RemovedPurchasesIDs() (ids []int) {
	for id := range m.removedpurchases {
		ids = append(ids, id)
	}
	return
}

// PurchasesIDs returns the "purchases" edge IDs in the mutation.
func (m *ItemMutation) PurchasesIDs() (ids []int) {
	for id := range m.purchases {
		ids = append(ids, id)
	}
	return
}

// ResetPurchases resets all changes to the "purchases" edge.
func (m *ItemMutation) ResetPurchases() {
	m.purchases = nil
	m.clearedpurchases = false
	m.removedpurchases = nil
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *ItemMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *ItemMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *ItemMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *ItemMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *ItemMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *ItemMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *ItemMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// SetSublabelID sets the "sublabel" edge to the SubLabel entity by id.
func (m *ItemMutation) SetSublabelID(id int) {
	m.sublabel = &id
}

// ClearSublabel clears the "sublabel" edge to the SubLabel entity.
func (m *ItemMutation) ClearSublabel() {
	m.clearedsublabel = true
}

// SublabelCleared reports if the "sublabel" edge to the SubLabel entity was cleared.
func (m *ItemMutation) SublabelCleared() bool {
	return m.clearedsublabel
}

// SublabelID returns the "sublabel" edge ID in the mutation.
func (m *ItemMutation) SublabelID() (id int, exists bool) {
	if m.sublabel != nil {
		return *m.sublabel, true
	}
	return
}

// SublabelIDs returns the "sublabel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SublabelID instead. It exists only for internal usage by the builders.
func (m *ItemMutation) SublabelIDs() (ids []int) {
	if id := m.sublabel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSublabel resets all changes to the "sublabel" edge.
func (m *ItemMutation) ResetSublabel() {
	m.sublabel = nil
	m.clearedsublabel = false
}

// AddShoppingListIDs adds the "shoppingList" edge to the ShoppingListItem entity by ids.
func (m *ItemMutation) AddShoppingListIDs(ids ...int) {
	if m.shoppingList == nil {
		m.shoppingList = make(map[int]struct{})
	}
	for i := range ids {
		m.shoppingList[ids[i]] = struct{}{}
	}
}

// ClearShoppingList clears the "shoppingList" edge to the ShoppingListItem entity.
func (m *ItemMutation) ClearShoppingList() {
	m.clearedshoppingList = true
}

// ShoppingListCleared reports if the "shoppingList" edge to the ShoppingListItem entity was cleared.
func (m *ItemMutation) ShoppingListCleared() bool {
	return m.clearedshoppingList
}

// RemoveShoppingListIDs removes the "shoppingList" edge to the ShoppingListItem entity by IDs.
func (m *ItemMutation) RemoveShoppingListIDs(ids ...int) {
	if m.removedshoppingList == nil {
		m.removedshoppingList = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shoppingList, ids[i])
		m.removedshoppingList[ids[i]] = struct{}{}
	}
}

// RemovedShoppingList returns the removed IDs of the "shoppingList" edge to the ShoppingListItem entity.
func (m *ItemMutation) RemovedShoppingListIDs() (ids []int) {
	for id := range m.removedshoppingList {
		ids = append(ids, id)
	}
	return
}

// ShoppingListIDs returns the "shoppingList" edge IDs in the mutation.
func (m *ItemMutation) ShoppingListIDs() (ids []int) {
	for id := range m.shoppingList {
		ids = append(ids, id)
	}
	return
}

// ResetShoppingList resets all changes to the "shoppingList" edge.
func (m *ItemMutation) ResetShoppingList() {
	m.shoppingList = nil
	m.clearedshoppingList = false
	m.removedshoppingList = nil
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, item.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, item.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, item.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, item.FieldSlug)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldCreateTime:
		return m.CreateTime()
	case item.FieldUpdateTime:
		return m.UpdateTime()
	case item.FieldName:
		return m.Name()
	case item.FieldSlug:
		return m.Slug()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case item.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case item.FieldName:
		return m.OldName(ctx)
	case item.FieldSlug:
		return m.OldSlug(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case item.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case item.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case item.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case item.FieldName:
		m.ResetName()
		return nil
	case item.FieldSlug:
		m.ResetSlug()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.purchases != nil {
		edges = append(edges, item.EdgePurchases)
	}
	if m.tags != nil {
		edges = append(edges, item.EdgeTags)
	}
	if m.sublabel != nil {
		edges = append(edges, item.EdgeSublabel)
	}
	if m.shoppingList != nil {
		edges = append(edges, item.EdgeShoppingList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgePurchases:
		ids := make([]ent.Value, 0, len(m.purchases))
		for id := range m.purchases {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeSublabel:
		if id := m.sublabel; id != nil {
			return []ent.Value{*id}
		}
	case item.EdgeShoppingList:
		ids := make([]ent.Value, 0, len(m.shoppingList))
		for id := range m.shoppingList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedpurchases != nil {
		edges = append(edges, item.EdgePurchases)
	}
	if m.removedtags != nil {
		edges = append(edges, item.EdgeTags)
	}
	if m.removedshoppingList != nil {
		edges = append(edges, item.EdgeShoppingList)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgePurchases:
		ids := make([]ent.Value, 0, len(m.removedpurchases))
		for id := range m.removedpurchases {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case item.EdgeShoppingList:
		ids := make([]ent.Value, 0, len(m.removedshoppingList))
		for id := range m.removedshoppingList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedpurchases {
		edges = append(edges, item.EdgePurchases)
	}
	if m.clearedtags {
		edges = append(edges, item.EdgeTags)
	}
	if m.clearedsublabel {
		edges = append(edges, item.EdgeSublabel)
	}
	if m.clearedshoppingList {
		edges = append(edges, item.EdgeShoppingList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgePurchases:
		return m.clearedpurchases
	case item.EdgeTags:
		return m.clearedtags
	case item.EdgeSublabel:
		return m.clearedsublabel
	case item.EdgeShoppingList:
		return m.clearedshoppingList
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	case item.EdgeSublabel:
		m.ClearSublabel()
		return nil
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgePurchases:
		m.ResetPurchases()
		return nil
	case item.EdgeTags:
		m.ResetTags()
		return nil
	case item.EdgeSublabel:
		m.ResetSublabel()
		return nil
	case item.EdgeShoppingList:
		m.ResetShoppingList()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// ShoppingMutation represents an operation that mutates the Shopping nodes in the graph.
type ShoppingMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	create_time         *time.Time
	update_time         *time.Time
	date                *time.Time
	clearedFields       map[string]struct{}
	items               map[int]struct{}
	removeditems        map[int]struct{}
	cleareditems        bool
	vendor              *int
	clearedvendor       bool
	shoppingList        map[int]struct{}
	removedshoppingList map[int]struct{}
	clearedshoppingList bool
	done                bool
	oldValue            func(context.Context) (*Shopping, error)
	predicates          []predicate.Shopping
}

var _ ent.Mutation = (*ShoppingMutation)(nil)

// shoppingOption allows management of the mutation configuration using functional options.
type shoppingOption func(*ShoppingMutation)

// newShoppingMutation creates new mutation for the Shopping entity.
func newShoppingMutation(c config, op Op, opts ...shoppingOption) *ShoppingMutation {
	m := &ShoppingMutation{
		config:        c,
		op:            op,
		typ:           TypeShopping,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingID sets the ID field of the mutation.
func withShoppingID(id int) shoppingOption {
	return func(m *ShoppingMutation) {
		var (
			err   error
			once  sync.Once
			value *Shopping
		)
		m.oldValue = func(ctx context.Context) (*Shopping, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shopping.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShopping sets the old Shopping of the mutation.
func withShopping(node *Shopping) shoppingOption {
	return func(m *ShoppingMutation) {
		m.oldValue = func(context.Context) (*Shopping, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ShoppingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShoppingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShoppingMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShoppingMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShoppingMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShoppingMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDate sets the "date" field.
func (m *ShoppingMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ShoppingMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *ShoppingMutation) ResetDate() {
	m.date = nil
}

// AddItemIDs adds the "items" edge to the ShoppingItem entity by ids.
func (m *ShoppingMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the ShoppingItem entity.
func (m *ShoppingMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the ShoppingItem entity was cleared.
func (m *ShoppingMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the ShoppingItem entity by IDs.
func (m *ShoppingMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the ShoppingItem entity.
func (m *ShoppingMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *ShoppingMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *ShoppingMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// SetVendorID sets the "vendor" edge to the Vendor entity by id.
func (m *ShoppingMutation) SetVendorID(id int) {
	m.vendor = &id
}

// ClearVendor clears the "vendor" edge to the Vendor entity.
func (m *ShoppingMutation) ClearVendor() {
	m.clearedvendor = true
}

// VendorCleared reports if the "vendor" edge to the Vendor entity was cleared.
func (m *ShoppingMutation) VendorCleared() bool {
	return m.clearedvendor
}

// VendorID returns the "vendor" edge ID in the mutation.
func (m *ShoppingMutation) VendorID() (id int, exists bool) {
	if m.vendor != nil {
		return *m.vendor, true
	}
	return
}

// VendorIDs returns the "vendor" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VendorID instead. It exists only for internal usage by the builders.
func (m *ShoppingMutation) VendorIDs() (ids []int) {
	if id := m.vendor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVendor resets all changes to the "vendor" edge.
func (m *ShoppingMutation) ResetVendor() {
	m.vendor = nil
	m.clearedvendor = false
}

// AddShoppingListIDs adds the "shoppingList" edge to the ShoppingList entity by ids.
func (m *ShoppingMutation) AddShoppingListIDs(ids ...int) {
	if m.shoppingList == nil {
		m.shoppingList = make(map[int]struct{})
	}
	for i := range ids {
		m.shoppingList[ids[i]] = struct{}{}
	}
}

// ClearShoppingList clears the "shoppingList" edge to the ShoppingList entity.
func (m *ShoppingMutation) ClearShoppingList() {
	m.clearedshoppingList = true
}

// ShoppingListCleared reports if the "shoppingList" edge to the ShoppingList entity was cleared.
func (m *ShoppingMutation) ShoppingListCleared() bool {
	return m.clearedshoppingList
}

// RemoveShoppingListIDs removes the "shoppingList" edge to the ShoppingList entity by IDs.
func (m *ShoppingMutation) RemoveShoppingListIDs(ids ...int) {
	if m.removedshoppingList == nil {
		m.removedshoppingList = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shoppingList, ids[i])
		m.removedshoppingList[ids[i]] = struct{}{}
	}
}

// RemovedShoppingList returns the removed IDs of the "shoppingList" edge to the ShoppingList entity.
func (m *ShoppingMutation) RemovedShoppingListIDs() (ids []int) {
	for id := range m.removedshoppingList {
		ids = append(ids, id)
	}
	return
}

// ShoppingListIDs returns the "shoppingList" edge IDs in the mutation.
func (m *ShoppingMutation) ShoppingListIDs() (ids []int) {
	for id := range m.shoppingList {
		ids = append(ids, id)
	}
	return
}

// ResetShoppingList resets all changes to the "shoppingList" edge.
func (m *ShoppingMutation) ResetShoppingList() {
	m.shoppingList = nil
	m.clearedshoppingList = false
	m.removedshoppingList = nil
}

// Where appends a list predicates to the ShoppingMutation builder.
func (m *ShoppingMutation) Where(ps ...predicate.Shopping) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShoppingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shopping).
func (m *ShoppingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, shopping.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shopping.FieldUpdateTime)
	}
	if m.date != nil {
		fields = append(fields, shopping.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shopping.FieldCreateTime:
		return m.CreateTime()
	case shopping.FieldUpdateTime:
		return m.UpdateTime()
	case shopping.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shopping.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shopping.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shopping.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Shopping field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shopping.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shopping.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shopping.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Shopping numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shopping nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingMutation) ResetField(name string) error {
	switch name {
	case shopping.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shopping.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shopping.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.items != nil {
		edges = append(edges, shopping.EdgeItems)
	}
	if m.vendor != nil {
		edges = append(edges, shopping.EdgeVendor)
	}
	if m.shoppingList != nil {
		edges = append(edges, shopping.EdgeShoppingList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	case shopping.EdgeVendor:
		if id := m.vendor; id != nil {
			return []ent.Value{*id}
		}
	case shopping.EdgeShoppingList:
		ids := make([]ent.Value, 0, len(m.shoppingList))
		for id := range m.shoppingList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeditems != nil {
		edges = append(edges, shopping.EdgeItems)
	}
	if m.removedshoppingList != nil {
		edges = append(edges, shopping.EdgeShoppingList)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	case shopping.EdgeShoppingList:
		ids := make([]ent.Value, 0, len(m.removedshoppingList))
		for id := range m.removedshoppingList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareditems {
		edges = append(edges, shopping.EdgeItems)
	}
	if m.clearedvendor {
		edges = append(edges, shopping.EdgeVendor)
	}
	if m.clearedshoppingList {
		edges = append(edges, shopping.EdgeShoppingList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingMutation) EdgeCleared(name string) bool {
	switch name {
	case shopping.EdgeItems:
		return m.cleareditems
	case shopping.EdgeVendor:
		return m.clearedvendor
	case shopping.EdgeShoppingList:
		return m.clearedshoppingList
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingMutation) ClearEdge(name string) error {
	switch name {
	case shopping.EdgeVendor:
		m.ClearVendor()
		return nil
	}
	return fmt.Errorf("unknown Shopping unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingMutation) ResetEdge(name string) error {
	switch name {
	case shopping.EdgeItems:
		m.ResetItems()
		return nil
	case shopping.EdgeVendor:
		m.ResetVendor()
		return nil
	case shopping.EdgeShoppingList:
		m.ResetShoppingList()
		return nil
	}
	return fmt.Errorf("unknown Shopping edge %s", name)
}

// ShoppingItemMutation represents an operation that mutates the ShoppingItem nodes in the graph.
type ShoppingItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	create_time         *time.Time
	update_time         *time.Time
	quantity            *float64
	addquantity         *float64
	quantity_type       *string
	units               *int
	addunits            *int
	brand               *string
	price_per_unit      *decimal.Decimal
	addprice_per_unit   *decimal.Decimal
	clearedFields       map[string]struct{}
	item                *int
	cleareditem         bool
	shopping            *int
	clearedshopping     bool
	shoppingList        map[int]struct{}
	removedshoppingList map[int]struct{}
	clearedshoppingList bool
	done                bool
	oldValue            func(context.Context) (*ShoppingItem, error)
	predicates          []predicate.ShoppingItem
}

var _ ent.Mutation = (*ShoppingItemMutation)(nil)

// shoppingitemOption allows management of the mutation configuration using functional options.
type shoppingitemOption func(*ShoppingItemMutation)

// newShoppingItemMutation creates new mutation for the ShoppingItem entity.
func newShoppingItemMutation(c config, op Op, opts ...shoppingitemOption) *ShoppingItemMutation {
	m := &ShoppingItemMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingItemID sets the ID field of the mutation.
func withShoppingItemID(id int) shoppingitemOption {
	return func(m *ShoppingItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingItem
		)
		m.oldValue = func(ctx context.Context) (*ShoppingItem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingItem sets the old ShoppingItem of the mutation.
func withShoppingItem(node *ShoppingItem) shoppingitemOption {
	return func(m *ShoppingItemMutation) {
		m.oldValue = func(context.Context) (*ShoppingItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ShoppingItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShoppingItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShoppingItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShoppingItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShoppingItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShoppingItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetQuantity sets the "quantity" field.
func (m *ShoppingItemMutation) SetQuantity(f float64) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ShoppingItemMutation) Quantity() (r float64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *ShoppingItemMutation) AddQuantity(f float64) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ShoppingItemMutation) AddedQuantity() (r float64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ClearQuantity clears the value of the "quantity" field.
func (m *ShoppingItemMutation) ClearQuantity() {
	m.quantity = nil
	m.addquantity = nil
	m.clearedFields[shoppingitem.FieldQuantity] = struct{}{}
}

// QuantityCleared returns if the "quantity" field was cleared in this mutation.
func (m *ShoppingItemMutation) QuantityCleared() bool {
	_, ok := m.clearedFields[shoppingitem.FieldQuantity]
	return ok
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ShoppingItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
	delete(m.clearedFields, shoppingitem.FieldQuantity)
}

// SetQuantityType sets the "quantity_type" field.
func (m *ShoppingItemMutation) SetQuantityType(s string) {
	m.quantity_type = &s
}

// QuantityType returns the value of the "quantity_type" field in the mutation.
func (m *ShoppingItemMutation) QuantityType() (r string, exists bool) {
	v := m.quantity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantityType returns the old "quantity_type" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldQuantityType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantityType: %w", err)
	}
	return oldValue.QuantityType, nil
}

// ClearQuantityType clears the value of the "quantity_type" field.
func (m *ShoppingItemMutation) ClearQuantityType() {
	m.quantity_type = nil
	m.clearedFields[shoppingitem.FieldQuantityType] = struct{}{}
}

// QuantityTypeCleared returns if the "quantity_type" field was cleared in this mutation.
func (m *ShoppingItemMutation) QuantityTypeCleared() bool {
	_, ok := m.clearedFields[shoppingitem.FieldQuantityType]
	return ok
}

// ResetQuantityType resets all changes to the "quantity_type" field.
func (m *ShoppingItemMutation) ResetQuantityType() {
	m.quantity_type = nil
	delete(m.clearedFields, shoppingitem.FieldQuantityType)
}

// SetUnits sets the "units" field.
func (m *ShoppingItemMutation) SetUnits(i int) {
	m.units = &i
	m.addunits = nil
}

// Units returns the value of the "units" field in the mutation.
func (m *ShoppingItemMutation) Units() (r int, exists bool) {
	v := m.units
	if v == nil {
		return
	}
	return *v, true
}

// OldUnits returns the old "units" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldUnits(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnits: %w", err)
	}
	return oldValue.Units, nil
}

// AddUnits adds i to the "units" field.
func (m *ShoppingItemMutation) AddUnits(i int) {
	if m.addunits != nil {
		*m.addunits += i
	} else {
		m.addunits = &i
	}
}

// AddedUnits returns the value that was added to the "units" field in this mutation.
func (m *ShoppingItemMutation) AddedUnits() (r int, exists bool) {
	v := m.addunits
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnits resets all changes to the "units" field.
func (m *ShoppingItemMutation) ResetUnits() {
	m.units = nil
	m.addunits = nil
}

// SetBrand sets the "brand" field.
func (m *ShoppingItemMutation) SetBrand(s string) {
	m.brand = &s
}

// Brand returns the value of the "brand" field in the mutation.
func (m *ShoppingItemMutation) Brand() (r string, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrand returns the old "brand" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldBrand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBrand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBrand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrand: %w", err)
	}
	return oldValue.Brand, nil
}

// ClearBrand clears the value of the "brand" field.
func (m *ShoppingItemMutation) ClearBrand() {
	m.brand = nil
	m.clearedFields[shoppingitem.FieldBrand] = struct{}{}
}

// BrandCleared returns if the "brand" field was cleared in this mutation.
func (m *ShoppingItemMutation) BrandCleared() bool {
	_, ok := m.clearedFields[shoppingitem.FieldBrand]
	return ok
}

// ResetBrand resets all changes to the "brand" field.
func (m *ShoppingItemMutation) ResetBrand() {
	m.brand = nil
	delete(m.clearedFields, shoppingitem.FieldBrand)
}

// SetPricePerUnit sets the "price_per_unit" field.
func (m *ShoppingItemMutation) SetPricePerUnit(d decimal.Decimal) {
	m.price_per_unit = &d
	m.addprice_per_unit = nil
}

// PricePerUnit returns the value of the "price_per_unit" field in the mutation.
func (m *ShoppingItemMutation) PricePerUnit() (r decimal.Decimal, exists bool) {
	v := m.price_per_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldPricePerUnit returns the old "price_per_unit" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldPricePerUnit(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPricePerUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPricePerUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPricePerUnit: %w", err)
	}
	return oldValue.PricePerUnit, nil
}

// AddPricePerUnit adds d to the "price_per_unit" field.
func (m *ShoppingItemMutation) AddPricePerUnit(d decimal.Decimal) {
	if m.addprice_per_unit != nil {
		*m.addprice_per_unit = m.addprice_per_unit.Add(d)
	} else {
		m.addprice_per_unit = &d
	}
}

// AddedPricePerUnit returns the value that was added to the "price_per_unit" field in this mutation.
func (m *ShoppingItemMutation) AddedPricePerUnit() (r decimal.Decimal, exists bool) {
	v := m.addprice_per_unit
	if v == nil {
		return
	}
	return *v, true
}

// ResetPricePerUnit resets all changes to the "price_per_unit" field.
func (m *ShoppingItemMutation) ResetPricePerUnit() {
	m.price_per_unit = nil
	m.addprice_per_unit = nil
}

// SetItemID sets the "item" edge to the Item entity by id.
func (m *ShoppingItemMutation) SetItemID(id int) {
	m.item = &id
}

// ClearItem clears the "item" edge to the Item entity.
func (m *ShoppingItemMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *ShoppingItemMutation) ItemCleared() bool {
	return m.cleareditem
}

// ItemID returns the "item" edge ID in the mutation.
func (m *ShoppingItemMutation) ItemID() (id int, exists bool) {
	if m.item != nil {
		return *m.item, true
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemID instead. It exists only for internal usage by the builders.
func (m *ShoppingItemMutation) ItemIDs() (ids []int) {
	if id := m.item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *ShoppingItemMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
}

// SetShoppingID sets the "shopping" edge to the Shopping entity by id.
func (m *ShoppingItemMutation) SetShoppingID(id int) {
	m.shopping = &id
}

// ClearShopping clears the "shopping" edge to the Shopping entity.
func (m *ShoppingItemMutation) ClearShopping() {
	m.clearedshopping = true
}

// ShoppingCleared reports if the "shopping" edge to the Shopping entity was cleared.
func (m *ShoppingItemMutation) ShoppingCleared() bool {
	return m.clearedshopping
}

// ShoppingID returns the "shopping" edge ID in the mutation.
func (m *ShoppingItemMutation) ShoppingID() (id int, exists bool) {
	if m.shopping != nil {
		return *m.shopping, true
	}
	return
}

// ShoppingIDs returns the "shopping" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingID instead. It exists only for internal usage by the builders.
func (m *ShoppingItemMutation) ShoppingIDs() (ids []int) {
	if id := m.shopping; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShopping resets all changes to the "shopping" edge.
func (m *ShoppingItemMutation) ResetShopping() {
	m.shopping = nil
	m.clearedshopping = false
}

// AddShoppingListIDs adds the "shoppingList" edge to the ShoppingListItem entity by ids.
func (m *ShoppingItemMutation) AddShoppingListIDs(ids ...int) {
	if m.shoppingList == nil {
		m.shoppingList = make(map[int]struct{})
	}
	for i := range ids {
		m.shoppingList[ids[i]] = struct{}{}
	}
}

// ClearShoppingList clears the "shoppingList" edge to the ShoppingListItem entity.
func (m *ShoppingItemMutation) ClearShoppingList() {
	m.clearedshoppingList = true
}

// ShoppingListCleared reports if the "shoppingList" edge to the ShoppingListItem entity was cleared.
func (m *ShoppingItemMutation) ShoppingListCleared() bool {
	return m.clearedshoppingList
}

// RemoveShoppingListIDs removes the "shoppingList" edge to the ShoppingListItem entity by IDs.
func (m *ShoppingItemMutation) RemoveShoppingListIDs(ids ...int) {
	if m.removedshoppingList == nil {
		m.removedshoppingList = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.shoppingList, ids[i])
		m.removedshoppingList[ids[i]] = struct{}{}
	}
}

// RemovedShoppingList returns the removed IDs of the "shoppingList" edge to the ShoppingListItem entity.
func (m *ShoppingItemMutation) RemovedShoppingListIDs() (ids []int) {
	for id := range m.removedshoppingList {
		ids = append(ids, id)
	}
	return
}

// ShoppingListIDs returns the "shoppingList" edge IDs in the mutation.
func (m *ShoppingItemMutation) ShoppingListIDs() (ids []int) {
	for id := range m.shoppingList {
		ids = append(ids, id)
	}
	return
}

// ResetShoppingList resets all changes to the "shoppingList" edge.
func (m *ShoppingItemMutation) ResetShoppingList() {
	m.shoppingList = nil
	m.clearedshoppingList = false
	m.removedshoppingList = nil
}

// Where appends a list predicates to the ShoppingItemMutation builder.
func (m *ShoppingItemMutation) Where(ps ...predicate.ShoppingItem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShoppingItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ShoppingItem).
func (m *ShoppingItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingItemMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, shoppingitem.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shoppingitem.FieldUpdateTime)
	}
	if m.quantity != nil {
		fields = append(fields, shoppingitem.FieldQuantity)
	}
	if m.quantity_type != nil {
		fields = append(fields, shoppingitem.FieldQuantityType)
	}
	if m.units != nil {
		fields = append(fields, shoppingitem.FieldUnits)
	}
	if m.brand != nil {
		fields = append(fields, shoppingitem.FieldBrand)
	}
	if m.price_per_unit != nil {
		fields = append(fields, shoppingitem.FieldPricePerUnit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoppingitem.FieldCreateTime:
		return m.CreateTime()
	case shoppingitem.FieldUpdateTime:
		return m.UpdateTime()
	case shoppingitem.FieldQuantity:
		return m.Quantity()
	case shoppingitem.FieldQuantityType:
		return m.QuantityType()
	case shoppingitem.FieldUnits:
		return m.Units()
	case shoppingitem.FieldBrand:
		return m.Brand()
	case shoppingitem.FieldPricePerUnit:
		return m.PricePerUnit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoppingitem.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shoppingitem.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shoppingitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case shoppingitem.FieldQuantityType:
		return m.OldQuantityType(ctx)
	case shoppingitem.FieldUnits:
		return m.OldUnits(ctx)
	case shoppingitem.FieldBrand:
		return m.OldBrand(ctx)
	case shoppingitem.FieldPricePerUnit:
		return m.OldPricePerUnit(ctx)
	}
	return nil, fmt.Errorf("unknown ShoppingItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoppingitem.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shoppingitem.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shoppingitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case shoppingitem.FieldQuantityType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantityType(v)
		return nil
	case shoppingitem.FieldUnits:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnits(v)
		return nil
	case shoppingitem.FieldBrand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrand(v)
		return nil
	case shoppingitem.FieldPricePerUnit:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPricePerUnit(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingItemMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, shoppingitem.FieldQuantity)
	}
	if m.addunits != nil {
		fields = append(fields, shoppingitem.FieldUnits)
	}
	if m.addprice_per_unit != nil {
		fields = append(fields, shoppingitem.FieldPricePerUnit)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shoppingitem.FieldQuantity:
		return m.AddedQuantity()
	case shoppingitem.FieldUnits:
		return m.AddedUnits()
	case shoppingitem.FieldPricePerUnit:
		return m.AddedPricePerUnit()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shoppingitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case shoppingitem.FieldUnits:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnits(v)
		return nil
	case shoppingitem.FieldPricePerUnit:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPricePerUnit(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shoppingitem.FieldQuantity) {
		fields = append(fields, shoppingitem.FieldQuantity)
	}
	if m.FieldCleared(shoppingitem.FieldQuantityType) {
		fields = append(fields, shoppingitem.FieldQuantityType)
	}
	if m.FieldCleared(shoppingitem.FieldBrand) {
		fields = append(fields, shoppingitem.FieldBrand)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingItemMutation) ClearField(name string) error {
	switch name {
	case shoppingitem.FieldQuantity:
		m.ClearQuantity()
		return nil
	case shoppingitem.FieldQuantityType:
		m.ClearQuantityType()
		return nil
	case shoppingitem.FieldBrand:
		m.ClearBrand()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingItemMutation) ResetField(name string) error {
	switch name {
	case shoppingitem.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shoppingitem.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shoppingitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case shoppingitem.FieldQuantityType:
		m.ResetQuantityType()
		return nil
	case shoppingitem.FieldUnits:
		m.ResetUnits()
		return nil
	case shoppingitem.FieldBrand:
		m.ResetBrand()
		return nil
	case shoppingitem.FieldPricePerUnit:
		m.ResetPricePerUnit()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.item != nil {
		edges = append(edges, shoppingitem.EdgeItem)
	}
	if m.shopping != nil {
		edges = append(edges, shoppingitem.EdgeShopping)
	}
	if m.shoppingList != nil {
		edges = append(edges, shoppingitem.EdgeShoppingList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppingitem.EdgeItem:
		if id := m.item; id != nil {
			return []ent.Value{*id}
		}
	case shoppingitem.EdgeShopping:
		if id := m.shopping; id != nil {
			return []ent.Value{*id}
		}
	case shoppingitem.EdgeShoppingList:
		ids := make([]ent.Value, 0, len(m.shoppingList))
		for id := range m.shoppingList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedshoppingList != nil {
		edges = append(edges, shoppingitem.EdgeShoppingList)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shoppingitem.EdgeShoppingList:
		ids := make([]ent.Value, 0, len(m.removedshoppingList))
		for id := range m.removedshoppingList {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareditem {
		edges = append(edges, shoppingitem.EdgeItem)
	}
	if m.clearedshopping {
		edges = append(edges, shoppingitem.EdgeShopping)
	}
	if m.clearedshoppingList {
		edges = append(edges, shoppingitem.EdgeShoppingList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingItemMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppingitem.EdgeItem:
		return m.cleareditem
	case shoppingitem.EdgeShopping:
		return m.clearedshopping
	case shoppingitem.EdgeShoppingList:
		return m.clearedshoppingList
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingItemMutation) ClearEdge(name string) error {
	switch name {
	case shoppingitem.EdgeItem:
		m.ClearItem()
		return nil
	case shoppingitem.EdgeShopping:
		m.ClearShopping()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingItemMutation) ResetEdge(name string) error {
	switch name {
	case shoppingitem.EdgeItem:
		m.ResetItem()
		return nil
	case shoppingitem.EdgeShopping:
		m.ResetShopping()
		return nil
	case shoppingitem.EdgeShoppingList:
		m.ResetShoppingList()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem edge %s", name)
}

// ShoppingListMutation represents an operation that mutates the ShoppingList nodes in the graph.
type ShoppingListMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	name             *string
	clearedFields    map[string]struct{}
	items            map[int]struct{}
	removeditems     map[int]struct{}
	cleareditems     bool
	purchases        *int
	clearedpurchases bool
	done             bool
	oldValue         func(context.Context) (*ShoppingList, error)
	predicates       []predicate.ShoppingList
}

var _ ent.Mutation = (*ShoppingListMutation)(nil)

// shoppinglistOption allows management of the mutation configuration using functional options.
type shoppinglistOption func(*ShoppingListMutation)

// newShoppingListMutation creates new mutation for the ShoppingList entity.
func newShoppingListMutation(c config, op Op, opts ...shoppinglistOption) *ShoppingListMutation {
	m := &ShoppingListMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingListID sets the ID field of the mutation.
func withShoppingListID(id int) shoppinglistOption {
	return func(m *ShoppingListMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingList
		)
		m.oldValue = func(ctx context.Context) (*ShoppingList, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingList.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingList sets the old ShoppingList of the mutation.
func withShoppingList(node *ShoppingList) shoppinglistOption {
	return func(m *ShoppingListMutation) {
		m.oldValue = func(context.Context) (*ShoppingList, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingListMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ShoppingListMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShoppingListMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ShoppingList entity.
// If the ShoppingList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingListMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShoppingListMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShoppingListMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShoppingListMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ShoppingList entity.
// If the ShoppingList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingListMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShoppingListMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *ShoppingListMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ShoppingListMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ShoppingList entity.
// If the ShoppingList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingListMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ShoppingListMutation) ResetName() {
	m.name = nil
}

// AddItemIDs adds the "items" edge to the ShoppingListItem entity by ids.
func (m *ShoppingListMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the ShoppingListItem entity.
func (m *ShoppingListMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the ShoppingListItem entity was cleared.
func (m *ShoppingListMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the ShoppingListItem entity by IDs.
func (m *ShoppingListMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the ShoppingListItem entity.
func (m *ShoppingListMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *ShoppingListMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *ShoppingListMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// SetPurchasesID sets the "purchases" edge to the Shopping entity by id.
func (m *ShoppingListMutation) SetPurchasesID(id int) {
	m.purchases = &id
}

// ClearPurchases clears the "purchases" edge to the Shopping entity.
func (m *ShoppingListMutation) ClearPurchases() {
	m.clearedpurchases = true
}

// PurchasesCleared reports if the "purchases" edge to the Shopping entity was cleared.
func (m *ShoppingListMutation) PurchasesCleared() bool {
	return m.clearedpurchases
}

// PurchasesID returns the "purchases" edge ID in the mutation.
func (m *ShoppingListMutation) PurchasesID() (id int, exists bool) {
	if m.purchases != nil {
		return *m.purchases, true
	}
	return
}

// PurchasesIDs returns the "purchases" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PurchasesID instead. It exists only for internal usage by the builders.
func (m *ShoppingListMutation) PurchasesIDs() (ids []int) {
	if id := m.purchases; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPurchases resets all changes to the "purchases" edge.
func (m *ShoppingListMutation) ResetPurchases() {
	m.purchases = nil
	m.clearedpurchases = false
}

// Where appends a list predicates to the ShoppingListMutation builder.
func (m *ShoppingListMutation) Where(ps ...predicate.ShoppingList) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShoppingListMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ShoppingList).
func (m *ShoppingListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingListMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, shoppinglist.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shoppinglist.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, shoppinglist.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoppinglist.FieldCreateTime:
		return m.CreateTime()
	case shoppinglist.FieldUpdateTime:
		return m.UpdateTime()
	case shoppinglist.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoppinglist.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shoppinglist.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shoppinglist.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown ShoppingList field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoppinglist.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shoppinglist.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shoppinglist.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingList field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingListMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingListMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingListMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShoppingList numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingListMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingListMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShoppingList nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingListMutation) ResetField(name string) error {
	switch name {
	case shoppinglist.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shoppinglist.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shoppinglist.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown ShoppingList field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingListMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.items != nil {
		edges = append(edges, shoppinglist.EdgeItems)
	}
	if m.purchases != nil {
		edges = append(edges, shoppinglist.EdgePurchases)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingListMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppinglist.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	case shoppinglist.EdgePurchases:
		if id := m.purchases; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditems != nil {
		edges = append(edges, shoppinglist.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingListMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shoppinglist.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareditems {
		edges = append(edges, shoppinglist.EdgeItems)
	}
	if m.clearedpurchases {
		edges = append(edges, shoppinglist.EdgePurchases)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingListMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppinglist.EdgeItems:
		return m.cleareditems
	case shoppinglist.EdgePurchases:
		return m.clearedpurchases
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingListMutation) ClearEdge(name string) error {
	switch name {
	case shoppinglist.EdgePurchases:
		m.ClearPurchases()
		return nil
	}
	return fmt.Errorf("unknown ShoppingList unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingListMutation) ResetEdge(name string) error {
	switch name {
	case shoppinglist.EdgeItems:
		m.ResetItems()
		return nil
	case shoppinglist.EdgePurchases:
		m.ResetPurchases()
		return nil
	}
	return fmt.Errorf("unknown ShoppingList edge %s", name)
}

// ShoppingListItemMutation represents an operation that mutates the ShoppingListItem nodes in the graph.
type ShoppingListItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	clearedFields       map[string]struct{}
	shoppingList        *int
	clearedshoppingList bool
	item                *int
	cleareditem         bool
	purchase            *int
	clearedpurchase     bool
	done                bool
	oldValue            func(context.Context) (*ShoppingListItem, error)
	predicates          []predicate.ShoppingListItem
}

var _ ent.Mutation = (*ShoppingListItemMutation)(nil)

// shoppinglistitemOption allows management of the mutation configuration using functional options.
type shoppinglistitemOption func(*ShoppingListItemMutation)

// newShoppingListItemMutation creates new mutation for the ShoppingListItem entity.
func newShoppingListItemMutation(c config, op Op, opts ...shoppinglistitemOption) *ShoppingListItemMutation {
	m := &ShoppingListItemMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingListItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingListItemID sets the ID field of the mutation.
func withShoppingListItemID(id int) shoppinglistitemOption {
	return func(m *ShoppingListItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingListItem
		)
		m.oldValue = func(ctx context.Context) (*ShoppingListItem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingListItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingListItem sets the old ShoppingListItem of the mutation.
func withShoppingListItem(node *ShoppingListItem) shoppinglistitemOption {
	return func(m *ShoppingListItemMutation) {
		m.oldValue = func(context.Context) (*ShoppingListItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingListItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingListItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingListItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetShoppingListID sets the "shoppingList" edge to the ShoppingList entity by id.
func (m *ShoppingListItemMutation) SetShoppingListID(id int) {
	m.shoppingList = &id
}

// ClearShoppingList clears the "shoppingList" edge to the ShoppingList entity.
func (m *ShoppingListItemMutation) ClearShoppingList() {
	m.clearedshoppingList = true
}

// ShoppingListCleared reports if the "shoppingList" edge to the ShoppingList entity was cleared.
func (m *ShoppingListItemMutation) ShoppingListCleared() bool {
	return m.clearedshoppingList
}

// ShoppingListID returns the "shoppingList" edge ID in the mutation.
func (m *ShoppingListItemMutation) ShoppingListID() (id int, exists bool) {
	if m.shoppingList != nil {
		return *m.shoppingList, true
	}
	return
}

// ShoppingListIDs returns the "shoppingList" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingListID instead. It exists only for internal usage by the builders.
func (m *ShoppingListItemMutation) ShoppingListIDs() (ids []int) {
	if id := m.shoppingList; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShoppingList resets all changes to the "shoppingList" edge.
func (m *ShoppingListItemMutation) ResetShoppingList() {
	m.shoppingList = nil
	m.clearedshoppingList = false
}

// SetItemID sets the "item" edge to the Item entity by id.
func (m *ShoppingListItemMutation) SetItemID(id int) {
	m.item = &id
}

// ClearItem clears the "item" edge to the Item entity.
func (m *ShoppingListItemMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *ShoppingListItemMutation) ItemCleared() bool {
	return m.cleareditem
}

// ItemID returns the "item" edge ID in the mutation.
func (m *ShoppingListItemMutation) ItemID() (id int, exists bool) {
	if m.item != nil {
		return *m.item, true
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemID instead. It exists only for internal usage by the builders.
func (m *ShoppingListItemMutation) ItemIDs() (ids []int) {
	if id := m.item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *ShoppingListItemMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
}

// SetPurchaseID sets the "purchase" edge to the ShoppingItem entity by id.
func (m *ShoppingListItemMutation) SetPurchaseID(id int) {
	m.purchase = &id
}

// ClearPurchase clears the "purchase" edge to the ShoppingItem entity.
func (m *ShoppingListItemMutation) ClearPurchase() {
	m.clearedpurchase = true
}

// PurchaseCleared reports if the "purchase" edge to the ShoppingItem entity was cleared.
func (m *ShoppingListItemMutation) PurchaseCleared() bool {
	return m.clearedpurchase
}

// PurchaseID returns the "purchase" edge ID in the mutation.
func (m *ShoppingListItemMutation) PurchaseID() (id int, exists bool) {
	if m.purchase != nil {
		return *m.purchase, true
	}
	return
}

// PurchaseIDs returns the "purchase" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PurchaseID instead. It exists only for internal usage by the builders.
func (m *ShoppingListItemMutation) PurchaseIDs() (ids []int) {
	if id := m.purchase; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPurchase resets all changes to the "purchase" edge.
func (m *ShoppingListItemMutation) ResetPurchase() {
	m.purchase = nil
	m.clearedpurchase = false
}

// Where appends a list predicates to the ShoppingListItemMutation builder.
func (m *ShoppingListItemMutation) Where(ps ...predicate.ShoppingListItem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShoppingListItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ShoppingListItem).
func (m *ShoppingListItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingListItemMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingListItemMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingListItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ShoppingListItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingListItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShoppingListItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingListItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingListItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingListItemMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ShoppingListItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingListItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingListItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingListItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShoppingListItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingListItemMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ShoppingListItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingListItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.shoppingList != nil {
		edges = append(edges, shoppinglistitem.EdgeShoppingList)
	}
	if m.item != nil {
		edges = append(edges, shoppinglistitem.EdgeItem)
	}
	if m.purchase != nil {
		edges = append(edges, shoppinglistitem.EdgePurchase)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingListItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppinglistitem.EdgeShoppingList:
		if id := m.shoppingList; id != nil {
			return []ent.Value{*id}
		}
	case shoppinglistitem.EdgeItem:
		if id := m.item; id != nil {
			return []ent.Value{*id}
		}
	case shoppinglistitem.EdgePurchase:
		if id := m.purchase; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingListItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingListItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingListItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedshoppingList {
		edges = append(edges, shoppinglistitem.EdgeShoppingList)
	}
	if m.cleareditem {
		edges = append(edges, shoppinglistitem.EdgeItem)
	}
	if m.clearedpurchase {
		edges = append(edges, shoppinglistitem.EdgePurchase)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingListItemMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppinglistitem.EdgeShoppingList:
		return m.clearedshoppingList
	case shoppinglistitem.EdgeItem:
		return m.cleareditem
	case shoppinglistitem.EdgePurchase:
		return m.clearedpurchase
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingListItemMutation) ClearEdge(name string) error {
	switch name {
	case shoppinglistitem.EdgeShoppingList:
		m.ClearShoppingList()
		return nil
	case shoppinglistitem.EdgeItem:
		m.ClearItem()
		return nil
	case shoppinglistitem.EdgePurchase:
		m.ClearPurchase()
		return nil
	}
	return fmt.Errorf("unknown ShoppingListItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingListItemMutation) ResetEdge(name string) error {
	switch name {
	case shoppinglistitem.EdgeShoppingList:
		m.ResetShoppingList()
		return nil
	case shoppinglistitem.EdgeItem:
		m.ResetItem()
		return nil
	case shoppinglistitem.EdgePurchase:
		m.ResetPurchase()
		return nil
	}
	return fmt.Errorf("unknown ShoppingListItem edge %s", name)
}

// SubLabelMutation represents an operation that mutates the SubLabel nodes in the graph.
type SubLabelMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	clearedFields map[string]struct{}
	parent        *int
	clearedparent bool
	items         map[int]struct{}
	removeditems  map[int]struct{}
	cleareditems  bool
	done          bool
	oldValue      func(context.Context) (*SubLabel, error)
	predicates    []predicate.SubLabel
}

var _ ent.Mutation = (*SubLabelMutation)(nil)

// sublabelOption allows management of the mutation configuration using functional options.
type sublabelOption func(*SubLabelMutation)

// newSubLabelMutation creates new mutation for the SubLabel entity.
func newSubLabelMutation(c config, op Op, opts ...sublabelOption) *SubLabelMutation {
	m := &SubLabelMutation{
		config:        c,
		op:            op,
		typ:           TypeSubLabel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubLabelID sets the ID field of the mutation.
func withSubLabelID(id int) sublabelOption {
	return func(m *SubLabelMutation) {
		var (
			err   error
			once  sync.Once
			value *SubLabel
		)
		m.oldValue = func(ctx context.Context) (*SubLabel, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubLabel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubLabel sets the old SubLabel of the mutation.
func withSubLabel(node *SubLabel) sublabelOption {
	return func(m *SubLabelMutation) {
		m.oldValue = func(context.Context) (*SubLabel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubLabelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubLabelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubLabelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *SubLabelMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SubLabelMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the SubLabel entity.
// If the SubLabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubLabelMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SubLabelMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SubLabelMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SubLabelMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the SubLabel entity.
// If the SubLabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubLabelMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SubLabelMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *SubLabelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubLabelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SubLabel entity.
// If the SubLabel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubLabelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SubLabelMutation) ResetName() {
	m.name = nil
}

// SetParentID sets the "parent" edge to the Tag entity by id.
func (m *SubLabelMutation) SetParentID(id int) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Tag entity.
func (m *SubLabelMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Tag entity was cleared.
func (m *SubLabelMutation) ParentCleared() bool {
	return m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *SubLabelMutation) ParentID() (id int, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *SubLabelMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *SubLabelMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *SubLabelMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *SubLabelMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *SubLabelMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *SubLabelMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *SubLabelMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *SubLabelMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *SubLabelMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// Where appends a list predicates to the SubLabelMutation builder.
func (m *SubLabelMutation) Where(ps ...predicate.SubLabel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SubLabelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SubLabel).
func (m *SubLabelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubLabelMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, sublabel.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, sublabel.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, sublabel.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubLabelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sublabel.FieldCreateTime:
		return m.CreateTime()
	case sublabel.FieldUpdateTime:
		return m.UpdateTime()
	case sublabel.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubLabelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sublabel.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case sublabel.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case sublabel.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown SubLabel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubLabelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sublabel.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case sublabel.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case sublabel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown SubLabel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubLabelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubLabelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubLabelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SubLabel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubLabelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubLabelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubLabelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SubLabel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubLabelMutation) ResetField(name string) error {
	switch name {
	case sublabel.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case sublabel.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case sublabel.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown SubLabel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubLabelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, sublabel.EdgeParent)
	}
	if m.items != nil {
		edges = append(edges, sublabel.EdgeItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubLabelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sublabel.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case sublabel.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubLabelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditems != nil {
		edges = append(edges, sublabel.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubLabelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sublabel.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubLabelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, sublabel.EdgeParent)
	}
	if m.cleareditems {
		edges = append(edges, sublabel.EdgeItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubLabelMutation) EdgeCleared(name string) bool {
	switch name {
	case sublabel.EdgeParent:
		return m.clearedparent
	case sublabel.EdgeItems:
		return m.cleareditems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubLabelMutation) ClearEdge(name string) error {
	switch name {
	case sublabel.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown SubLabel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubLabelMutation) ResetEdge(name string) error {
	switch name {
	case sublabel.EdgeParent:
		m.ResetParent()
		return nil
	case sublabel.EdgeItems:
		m.ResetItems()
		return nil
	}
	return fmt.Errorf("unknown SubLabel edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op              Op
	typ             string
	id              *int
	create_time     *time.Time
	update_time     *time.Time
	name            *string
	clearedFields   map[string]struct{}
	items           map[int]struct{}
	removeditems    map[int]struct{}
	cleareditems    bool
	children        map[int]struct{}
	removedchildren map[int]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*Tag, error)
	predicates      []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *TagMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TagMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TagMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TagMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TagMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TagMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *TagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TagMutation) ResetName() {
	m.name = nil
}

// AddItemIDs adds the "items" edge to the Item entity by ids.
func (m *TagMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the Item entity.
func (m *TagMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the Item entity was cleared.
func (m *TagMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the Item entity by IDs.
func (m *TagMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the Item entity.
func (m *TagMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *TagMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *TagMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// AddChildIDs adds the "children" edge to the SubLabel entity by ids.
func (m *TagMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the SubLabel entity.
func (m *TagMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the SubLabel entity was cleared.
func (m *TagMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the SubLabel entity by IDs.
func (m *TagMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the SubLabel entity.
func (m *TagMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *TagMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *TagMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, tag.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, tag.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, tag.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldCreateTime:
		return m.CreateTime()
	case tag.FieldUpdateTime:
		return m.UpdateTime()
	case tag.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case tag.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case tag.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case tag.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case tag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case tag.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case tag.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.items != nil {
		edges = append(edges, tag.EdgeItems)
	}
	if m.children != nil {
		edges = append(edges, tag.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeditems != nil {
		edges = append(edges, tag.EdgeItems)
	}
	if m.removedchildren != nil {
		edges = append(edges, tag.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareditems {
		edges = append(edges, tag.EdgeItems)
	}
	if m.clearedchildren {
		edges = append(edges, tag.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeItems:
		return m.cleareditems
	case tag.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeItems:
		m.ResetItems()
		return nil
	case tag.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}

// VendorMutation represents an operation that mutates the Vendor nodes in the graph.
type VendorMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	name             *string
	slug             *string
	clearedFields    map[string]struct{}
	purchases        map[int]struct{}
	removedpurchases map[int]struct{}
	clearedpurchases bool
	done             bool
	oldValue         func(context.Context) (*Vendor, error)
	predicates       []predicate.Vendor
}

var _ ent.Mutation = (*VendorMutation)(nil)

// vendorOption allows management of the mutation configuration using functional options.
type vendorOption func(*VendorMutation)

// newVendorMutation creates new mutation for the Vendor entity.
func newVendorMutation(c config, op Op, opts ...vendorOption) *VendorMutation {
	m := &VendorMutation{
		config:        c,
		op:            op,
		typ:           TypeVendor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVendorID sets the ID field of the mutation.
func withVendorID(id int) vendorOption {
	return func(m *VendorMutation) {
		var (
			err   error
			once  sync.Once
			value *Vendor
		)
		m.oldValue = func(ctx context.Context) (*Vendor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vendor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVendor sets the old Vendor of the mutation.
func withVendor(node *Vendor) vendorOption {
	return func(m *VendorMutation) {
		m.oldValue = func(context.Context) (*Vendor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VendorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VendorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VendorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *VendorMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *VendorMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *VendorMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *VendorMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *VendorMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *VendorMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *VendorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *VendorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *VendorMutation) ResetName() {
	m.name = nil
}

// SetSlug sets the "slug" field.
func (m *VendorMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *VendorMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Vendor entity.
// If the Vendor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VendorMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *VendorMutation) ResetSlug() {
	m.slug = nil
}

// AddPurchaseIDs adds the "purchases" edge to the Shopping entity by ids.
func (m *VendorMutation) AddPurchaseIDs(ids ...int) {
	if m.purchases == nil {
		m.purchases = make(map[int]struct{})
	}
	for i := range ids {
		m.purchases[ids[i]] = struct{}{}
	}
}

// ClearPurchases clears the "purchases" edge to the Shopping entity.
func (m *VendorMutation) ClearPurchases() {
	m.clearedpurchases = true
}

// PurchasesCleared reports if the "purchases" edge to the Shopping entity was cleared.
func (m *VendorMutation) PurchasesCleared() bool {
	return m.clearedpurchases
}

// RemovePurchaseIDs removes the "purchases" edge to the Shopping entity by IDs.
func (m *VendorMutation) RemovePurchaseIDs(ids ...int) {
	if m.removedpurchases == nil {
		m.removedpurchases = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.purchases, ids[i])
		m.removedpurchases[ids[i]] = struct{}{}
	}
}

// RemovedPurchases returns the removed IDs of the "purchases" edge to the Shopping entity.
func (m *VendorMutation) RemovedPurchasesIDs() (ids []int) {
	for id := range m.removedpurchases {
		ids = append(ids, id)
	}
	return
}

// PurchasesIDs returns the "purchases" edge IDs in the mutation.
func (m *VendorMutation) PurchasesIDs() (ids []int) {
	for id := range m.purchases {
		ids = append(ids, id)
	}
	return
}

// ResetPurchases resets all changes to the "purchases" edge.
func (m *VendorMutation) ResetPurchases() {
	m.purchases = nil
	m.clearedpurchases = false
	m.removedpurchases = nil
}

// Where appends a list predicates to the VendorMutation builder.
func (m *VendorMutation) Where(ps ...predicate.Vendor) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VendorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Vendor).
func (m *VendorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VendorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, vendor.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, vendor.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, vendor.FieldName)
	}
	if m.slug != nil {
		fields = append(fields, vendor.FieldSlug)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VendorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vendor.FieldCreateTime:
		return m.CreateTime()
	case vendor.FieldUpdateTime:
		return m.UpdateTime()
	case vendor.FieldName:
		return m.Name()
	case vendor.FieldSlug:
		return m.Slug()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VendorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vendor.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case vendor.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case vendor.FieldName:
		return m.OldName(ctx)
	case vendor.FieldSlug:
		return m.OldSlug(ctx)
	}
	return nil, fmt.Errorf("unknown Vendor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vendor.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case vendor.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case vendor.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case vendor.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	}
	return fmt.Errorf("unknown Vendor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VendorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VendorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VendorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Vendor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VendorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VendorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VendorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vendor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VendorMutation) ResetField(name string) error {
	switch name {
	case vendor.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case vendor.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case vendor.FieldName:
		m.ResetName()
		return nil
	case vendor.FieldSlug:
		m.ResetSlug()
		return nil
	}
	return fmt.Errorf("unknown Vendor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VendorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.purchases != nil {
		edges = append(edges, vendor.EdgePurchases)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VendorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vendor.EdgePurchases:
		ids := make([]ent.Value, 0, len(m.purchases))
		for id := range m.purchases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VendorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpurchases != nil {
		edges = append(edges, vendor.EdgePurchases)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VendorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case vendor.EdgePurchases:
		ids := make([]ent.Value, 0, len(m.removedpurchases))
		for id := range m.removedpurchases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VendorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpurchases {
		edges = append(edges, vendor.EdgePurchases)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VendorMutation) EdgeCleared(name string) bool {
	switch name {
	case vendor.EdgePurchases:
		return m.clearedpurchases
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VendorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Vendor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VendorMutation) ResetEdge(name string) error {
	switch name {
	case vendor.EdgePurchases:
		m.ResetPurchases()
		return nil
	}
	return fmt.Errorf("unknown Vendor edge %s", name)
}
