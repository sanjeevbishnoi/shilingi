// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/kingzbauer/shilingi/app-engine/ent/item"
	"github.com/kingzbauer/shilingi/app-engine/ent/predicate"
	"github.com/kingzbauer/shilingi/app-engine/ent/shopping"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppingitem"
	"github.com/shopspring/decimal"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem         = "Item"
	TypeShopping     = "Shopping"
	TypeShoppingItem = "ShoppingItem"
)

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	name             *string
	clearedFields    map[string]struct{}
	purchases        map[int]struct{}
	removedpurchases map[int]struct{}
	clearedpurchases bool
	done             bool
	oldValue         func(context.Context) (*Item, error)
	predicates       []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *ItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ItemMutation) ResetName() {
	m.name = nil
}

// AddPurchaseIDs adds the "purchases" edge to the ShoppingItem entity by ids.
func (m *ItemMutation) AddPurchaseIDs(ids ...int) {
	if m.purchases == nil {
		m.purchases = make(map[int]struct{})
	}
	for i := range ids {
		m.purchases[ids[i]] = struct{}{}
	}
}

// ClearPurchases clears the "purchases" edge to the ShoppingItem entity.
func (m *ItemMutation) ClearPurchases() {
	m.clearedpurchases = true
}

// PurchasesCleared reports if the "purchases" edge to the ShoppingItem entity was cleared.
func (m *ItemMutation) PurchasesCleared() bool {
	return m.clearedpurchases
}

// RemovePurchaseIDs removes the "purchases" edge to the ShoppingItem entity by IDs.
func (m *ItemMutation) RemovePurchaseIDs(ids ...int) {
	if m.removedpurchases == nil {
		m.removedpurchases = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.purchases, ids[i])
		m.removedpurchases[ids[i]] = struct{}{}
	}
}

// RemovedPurchases returns the removed IDs of the "purchases" edge to the ShoppingItem entity.
func (m *ItemMutation) RemovedPurchasesIDs() (ids []int) {
	for id := range m.removedpurchases {
		ids = append(ids, id)
	}
	return
}

// PurchasesIDs returns the "purchases" edge IDs in the mutation.
func (m *ItemMutation) PurchasesIDs() (ids []int) {
	for id := range m.purchases {
		ids = append(ids, id)
	}
	return
}

// ResetPurchases resets all changes to the "purchases" edge.
func (m *ItemMutation) ResetPurchases() {
	m.purchases = nil
	m.clearedpurchases = false
	m.removedpurchases = nil
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, item.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, item.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, item.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldCreateTime:
		return m.CreateTime()
	case item.FieldUpdateTime:
		return m.UpdateTime()
	case item.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case item.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case item.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case item.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case item.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case item.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.purchases != nil {
		edges = append(edges, item.EdgePurchases)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case item.EdgePurchases:
		ids := make([]ent.Value, 0, len(m.purchases))
		for id := range m.purchases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpurchases != nil {
		edges = append(edges, item.EdgePurchases)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case item.EdgePurchases:
		ids := make([]ent.Value, 0, len(m.removedpurchases))
		for id := range m.removedpurchases {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpurchases {
		edges = append(edges, item.EdgePurchases)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	switch name {
	case item.EdgePurchases:
		return m.clearedpurchases
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	switch name {
	case item.EdgePurchases:
		m.ResetPurchases()
		return nil
	}
	return fmt.Errorf("unknown Item edge %s", name)
}

// ShoppingMutation represents an operation that mutates the Shopping nodes in the graph.
type ShoppingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	date          *time.Time
	market        *string
	clearedFields map[string]struct{}
	items         map[int]struct{}
	removeditems  map[int]struct{}
	cleareditems  bool
	done          bool
	oldValue      func(context.Context) (*Shopping, error)
	predicates    []predicate.Shopping
}

var _ ent.Mutation = (*ShoppingMutation)(nil)

// shoppingOption allows management of the mutation configuration using functional options.
type shoppingOption func(*ShoppingMutation)

// newShoppingMutation creates new mutation for the Shopping entity.
func newShoppingMutation(c config, op Op, opts ...shoppingOption) *ShoppingMutation {
	m := &ShoppingMutation{
		config:        c,
		op:            op,
		typ:           TypeShopping,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingID sets the ID field of the mutation.
func withShoppingID(id int) shoppingOption {
	return func(m *ShoppingMutation) {
		var (
			err   error
			once  sync.Once
			value *Shopping
		)
		m.oldValue = func(ctx context.Context) (*Shopping, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shopping.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShopping sets the old Shopping of the mutation.
func withShopping(node *Shopping) shoppingOption {
	return func(m *ShoppingMutation) {
		m.oldValue = func(context.Context) (*Shopping, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ShoppingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShoppingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShoppingMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShoppingMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShoppingMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShoppingMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDate sets the "date" field.
func (m *ShoppingMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ShoppingMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *ShoppingMutation) ResetDate() {
	m.date = nil
}

// SetMarket sets the "market" field.
func (m *ShoppingMutation) SetMarket(s string) {
	m.market = &s
}

// Market returns the value of the "market" field in the mutation.
func (m *ShoppingMutation) Market() (r string, exists bool) {
	v := m.market
	if v == nil {
		return
	}
	return *v, true
}

// OldMarket returns the old "market" field's value of the Shopping entity.
// If the Shopping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingMutation) OldMarket(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMarket is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMarket requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarket: %w", err)
	}
	return oldValue.Market, nil
}

// ResetMarket resets all changes to the "market" field.
func (m *ShoppingMutation) ResetMarket() {
	m.market = nil
}

// AddItemIDs adds the "items" edge to the ShoppingItem entity by ids.
func (m *ShoppingMutation) AddItemIDs(ids ...int) {
	if m.items == nil {
		m.items = make(map[int]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the ShoppingItem entity.
func (m *ShoppingMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the ShoppingItem entity was cleared.
func (m *ShoppingMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the ShoppingItem entity by IDs.
func (m *ShoppingMutation) RemoveItemIDs(ids ...int) {
	if m.removeditems == nil {
		m.removeditems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the ShoppingItem entity.
func (m *ShoppingMutation) RemovedItemsIDs() (ids []int) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *ShoppingMutation) ItemsIDs() (ids []int) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *ShoppingMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// Where appends a list predicates to the ShoppingMutation builder.
func (m *ShoppingMutation) Where(ps ...predicate.Shopping) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShoppingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Shopping).
func (m *ShoppingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, shopping.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shopping.FieldUpdateTime)
	}
	if m.date != nil {
		fields = append(fields, shopping.FieldDate)
	}
	if m.market != nil {
		fields = append(fields, shopping.FieldMarket)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shopping.FieldCreateTime:
		return m.CreateTime()
	case shopping.FieldUpdateTime:
		return m.UpdateTime()
	case shopping.FieldDate:
		return m.Date()
	case shopping.FieldMarket:
		return m.Market()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shopping.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shopping.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shopping.FieldDate:
		return m.OldDate(ctx)
	case shopping.FieldMarket:
		return m.OldMarket(ctx)
	}
	return nil, fmt.Errorf("unknown Shopping field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shopping.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shopping.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shopping.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case shopping.FieldMarket:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarket(v)
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Shopping numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Shopping nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingMutation) ResetField(name string) error {
	switch name {
	case shopping.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shopping.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shopping.FieldDate:
		m.ResetDate()
		return nil
	case shopping.FieldMarket:
		m.ResetMarket()
		return nil
	}
	return fmt.Errorf("unknown Shopping field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.items != nil {
		edges = append(edges, shopping.EdgeItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeditems != nil {
		edges = append(edges, shopping.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case shopping.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditems {
		edges = append(edges, shopping.EdgeItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingMutation) EdgeCleared(name string) bool {
	switch name {
	case shopping.EdgeItems:
		return m.cleareditems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Shopping unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingMutation) ResetEdge(name string) error {
	switch name {
	case shopping.EdgeItems:
		m.ResetItems()
		return nil
	}
	return fmt.Errorf("unknown Shopping edge %s", name)
}

// ShoppingItemMutation represents an operation that mutates the ShoppingItem nodes in the graph.
type ShoppingItemMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	update_time       *time.Time
	quantity          *float64
	addquantity       *float64
	quantity_type     *string
	units             *int
	addunits          *int
	brand             *string
	price_per_unit    *decimal.Decimal
	addprice_per_unit *decimal.Decimal
	clearedFields     map[string]struct{}
	item              *int
	cleareditem       bool
	shopping          *int
	clearedshopping   bool
	done              bool
	oldValue          func(context.Context) (*ShoppingItem, error)
	predicates        []predicate.ShoppingItem
}

var _ ent.Mutation = (*ShoppingItemMutation)(nil)

// shoppingitemOption allows management of the mutation configuration using functional options.
type shoppingitemOption func(*ShoppingItemMutation)

// newShoppingItemMutation creates new mutation for the ShoppingItem entity.
func newShoppingItemMutation(c config, op Op, opts ...shoppingitemOption) *ShoppingItemMutation {
	m := &ShoppingItemMutation{
		config:        c,
		op:            op,
		typ:           TypeShoppingItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShoppingItemID sets the ID field of the mutation.
func withShoppingItemID(id int) shoppingitemOption {
	return func(m *ShoppingItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ShoppingItem
		)
		m.oldValue = func(ctx context.Context) (*ShoppingItem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShoppingItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShoppingItem sets the old ShoppingItem of the mutation.
func withShoppingItem(node *ShoppingItem) shoppingitemOption {
	return func(m *ShoppingItemMutation) {
		m.oldValue = func(context.Context) (*ShoppingItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShoppingItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShoppingItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShoppingItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreateTime sets the "create_time" field.
func (m *ShoppingItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShoppingItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShoppingItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShoppingItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShoppingItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShoppingItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetQuantity sets the "quantity" field.
func (m *ShoppingItemMutation) SetQuantity(f float64) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *ShoppingItemMutation) Quantity() (r float64, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldQuantity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *ShoppingItemMutation) AddQuantity(f float64) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *ShoppingItemMutation) AddedQuantity() (r float64, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *ShoppingItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetQuantityType sets the "quantity_type" field.
func (m *ShoppingItemMutation) SetQuantityType(s string) {
	m.quantity_type = &s
}

// QuantityType returns the value of the "quantity_type" field in the mutation.
func (m *ShoppingItemMutation) QuantityType() (r string, exists bool) {
	v := m.quantity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantityType returns the old "quantity_type" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldQuantityType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantityType: %w", err)
	}
	return oldValue.QuantityType, nil
}

// ResetQuantityType resets all changes to the "quantity_type" field.
func (m *ShoppingItemMutation) ResetQuantityType() {
	m.quantity_type = nil
}

// SetUnits sets the "units" field.
func (m *ShoppingItemMutation) SetUnits(i int) {
	m.units = &i
	m.addunits = nil
}

// Units returns the value of the "units" field in the mutation.
func (m *ShoppingItemMutation) Units() (r int, exists bool) {
	v := m.units
	if v == nil {
		return
	}
	return *v, true
}

// OldUnits returns the old "units" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldUnits(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnits is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnits requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnits: %w", err)
	}
	return oldValue.Units, nil
}

// AddUnits adds i to the "units" field.
func (m *ShoppingItemMutation) AddUnits(i int) {
	if m.addunits != nil {
		*m.addunits += i
	} else {
		m.addunits = &i
	}
}

// AddedUnits returns the value that was added to the "units" field in this mutation.
func (m *ShoppingItemMutation) AddedUnits() (r int, exists bool) {
	v := m.addunits
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnits resets all changes to the "units" field.
func (m *ShoppingItemMutation) ResetUnits() {
	m.units = nil
	m.addunits = nil
}

// SetBrand sets the "brand" field.
func (m *ShoppingItemMutation) SetBrand(s string) {
	m.brand = &s
}

// Brand returns the value of the "brand" field in the mutation.
func (m *ShoppingItemMutation) Brand() (r string, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrand returns the old "brand" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldBrand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBrand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBrand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrand: %w", err)
	}
	return oldValue.Brand, nil
}

// ClearBrand clears the value of the "brand" field.
func (m *ShoppingItemMutation) ClearBrand() {
	m.brand = nil
	m.clearedFields[shoppingitem.FieldBrand] = struct{}{}
}

// BrandCleared returns if the "brand" field was cleared in this mutation.
func (m *ShoppingItemMutation) BrandCleared() bool {
	_, ok := m.clearedFields[shoppingitem.FieldBrand]
	return ok
}

// ResetBrand resets all changes to the "brand" field.
func (m *ShoppingItemMutation) ResetBrand() {
	m.brand = nil
	delete(m.clearedFields, shoppingitem.FieldBrand)
}

// SetPricePerUnit sets the "price_per_unit" field.
func (m *ShoppingItemMutation) SetPricePerUnit(d decimal.Decimal) {
	m.price_per_unit = &d
	m.addprice_per_unit = nil
}

// PricePerUnit returns the value of the "price_per_unit" field in the mutation.
func (m *ShoppingItemMutation) PricePerUnit() (r decimal.Decimal, exists bool) {
	v := m.price_per_unit
	if v == nil {
		return
	}
	return *v, true
}

// OldPricePerUnit returns the old "price_per_unit" field's value of the ShoppingItem entity.
// If the ShoppingItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShoppingItemMutation) OldPricePerUnit(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPricePerUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPricePerUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPricePerUnit: %w", err)
	}
	return oldValue.PricePerUnit, nil
}

// AddPricePerUnit adds d to the "price_per_unit" field.
func (m *ShoppingItemMutation) AddPricePerUnit(d decimal.Decimal) {
	if m.addprice_per_unit != nil {
		*m.addprice_per_unit = m.addprice_per_unit.Add(d)
	} else {
		m.addprice_per_unit = &d
	}
}

// AddedPricePerUnit returns the value that was added to the "price_per_unit" field in this mutation.
func (m *ShoppingItemMutation) AddedPricePerUnit() (r decimal.Decimal, exists bool) {
	v := m.addprice_per_unit
	if v == nil {
		return
	}
	return *v, true
}

// ResetPricePerUnit resets all changes to the "price_per_unit" field.
func (m *ShoppingItemMutation) ResetPricePerUnit() {
	m.price_per_unit = nil
	m.addprice_per_unit = nil
}

// SetItemID sets the "item" edge to the Item entity by id.
func (m *ShoppingItemMutation) SetItemID(id int) {
	m.item = &id
}

// ClearItem clears the "item" edge to the Item entity.
func (m *ShoppingItemMutation) ClearItem() {
	m.cleareditem = true
}

// ItemCleared reports if the "item" edge to the Item entity was cleared.
func (m *ShoppingItemMutation) ItemCleared() bool {
	return m.cleareditem
}

// ItemID returns the "item" edge ID in the mutation.
func (m *ShoppingItemMutation) ItemID() (id int, exists bool) {
	if m.item != nil {
		return *m.item, true
	}
	return
}

// ItemIDs returns the "item" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ItemID instead. It exists only for internal usage by the builders.
func (m *ShoppingItemMutation) ItemIDs() (ids []int) {
	if id := m.item; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetItem resets all changes to the "item" edge.
func (m *ShoppingItemMutation) ResetItem() {
	m.item = nil
	m.cleareditem = false
}

// SetShoppingID sets the "shopping" edge to the Shopping entity by id.
func (m *ShoppingItemMutation) SetShoppingID(id int) {
	m.shopping = &id
}

// ClearShopping clears the "shopping" edge to the Shopping entity.
func (m *ShoppingItemMutation) ClearShopping() {
	m.clearedshopping = true
}

// ShoppingCleared reports if the "shopping" edge to the Shopping entity was cleared.
func (m *ShoppingItemMutation) ShoppingCleared() bool {
	return m.clearedshopping
}

// ShoppingID returns the "shopping" edge ID in the mutation.
func (m *ShoppingItemMutation) ShoppingID() (id int, exists bool) {
	if m.shopping != nil {
		return *m.shopping, true
	}
	return
}

// ShoppingIDs returns the "shopping" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ShoppingID instead. It exists only for internal usage by the builders.
func (m *ShoppingItemMutation) ShoppingIDs() (ids []int) {
	if id := m.shopping; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetShopping resets all changes to the "shopping" edge.
func (m *ShoppingItemMutation) ResetShopping() {
	m.shopping = nil
	m.clearedshopping = false
}

// Where appends a list predicates to the ShoppingItemMutation builder.
func (m *ShoppingItemMutation) Where(ps ...predicate.ShoppingItem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ShoppingItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ShoppingItem).
func (m *ShoppingItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShoppingItemMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, shoppingitem.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shoppingitem.FieldUpdateTime)
	}
	if m.quantity != nil {
		fields = append(fields, shoppingitem.FieldQuantity)
	}
	if m.quantity_type != nil {
		fields = append(fields, shoppingitem.FieldQuantityType)
	}
	if m.units != nil {
		fields = append(fields, shoppingitem.FieldUnits)
	}
	if m.brand != nil {
		fields = append(fields, shoppingitem.FieldBrand)
	}
	if m.price_per_unit != nil {
		fields = append(fields, shoppingitem.FieldPricePerUnit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShoppingItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shoppingitem.FieldCreateTime:
		return m.CreateTime()
	case shoppingitem.FieldUpdateTime:
		return m.UpdateTime()
	case shoppingitem.FieldQuantity:
		return m.Quantity()
	case shoppingitem.FieldQuantityType:
		return m.QuantityType()
	case shoppingitem.FieldUnits:
		return m.Units()
	case shoppingitem.FieldBrand:
		return m.Brand()
	case shoppingitem.FieldPricePerUnit:
		return m.PricePerUnit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShoppingItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shoppingitem.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shoppingitem.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shoppingitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case shoppingitem.FieldQuantityType:
		return m.OldQuantityType(ctx)
	case shoppingitem.FieldUnits:
		return m.OldUnits(ctx)
	case shoppingitem.FieldBrand:
		return m.OldBrand(ctx)
	case shoppingitem.FieldPricePerUnit:
		return m.OldPricePerUnit(ctx)
	}
	return nil, fmt.Errorf("unknown ShoppingItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shoppingitem.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shoppingitem.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shoppingitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case shoppingitem.FieldQuantityType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantityType(v)
		return nil
	case shoppingitem.FieldUnits:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnits(v)
		return nil
	case shoppingitem.FieldBrand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrand(v)
		return nil
	case shoppingitem.FieldPricePerUnit:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPricePerUnit(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShoppingItemMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, shoppingitem.FieldQuantity)
	}
	if m.addunits != nil {
		fields = append(fields, shoppingitem.FieldUnits)
	}
	if m.addprice_per_unit != nil {
		fields = append(fields, shoppingitem.FieldPricePerUnit)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShoppingItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case shoppingitem.FieldQuantity:
		return m.AddedQuantity()
	case shoppingitem.FieldUnits:
		return m.AddedUnits()
	case shoppingitem.FieldPricePerUnit:
		return m.AddedPricePerUnit()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShoppingItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case shoppingitem.FieldQuantity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case shoppingitem.FieldUnits:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnits(v)
		return nil
	case shoppingitem.FieldPricePerUnit:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPricePerUnit(v)
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShoppingItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shoppingitem.FieldBrand) {
		fields = append(fields, shoppingitem.FieldBrand)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShoppingItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShoppingItemMutation) ClearField(name string) error {
	switch name {
	case shoppingitem.FieldBrand:
		m.ClearBrand()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShoppingItemMutation) ResetField(name string) error {
	switch name {
	case shoppingitem.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shoppingitem.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shoppingitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case shoppingitem.FieldQuantityType:
		m.ResetQuantityType()
		return nil
	case shoppingitem.FieldUnits:
		m.ResetUnits()
		return nil
	case shoppingitem.FieldBrand:
		m.ResetBrand()
		return nil
	case shoppingitem.FieldPricePerUnit:
		m.ResetPricePerUnit()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShoppingItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.item != nil {
		edges = append(edges, shoppingitem.EdgeItem)
	}
	if m.shopping != nil {
		edges = append(edges, shoppingitem.EdgeShopping)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShoppingItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shoppingitem.EdgeItem:
		if id := m.item; id != nil {
			return []ent.Value{*id}
		}
	case shoppingitem.EdgeShopping:
		if id := m.shopping; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShoppingItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShoppingItemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShoppingItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareditem {
		edges = append(edges, shoppingitem.EdgeItem)
	}
	if m.clearedshopping {
		edges = append(edges, shoppingitem.EdgeShopping)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShoppingItemMutation) EdgeCleared(name string) bool {
	switch name {
	case shoppingitem.EdgeItem:
		return m.cleareditem
	case shoppingitem.EdgeShopping:
		return m.clearedshopping
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShoppingItemMutation) ClearEdge(name string) error {
	switch name {
	case shoppingitem.EdgeItem:
		m.ClearItem()
		return nil
	case shoppingitem.EdgeShopping:
		m.ClearShopping()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShoppingItemMutation) ResetEdge(name string) error {
	switch name {
	case shoppingitem.EdgeItem:
		m.ResetItem()
		return nil
	case shoppingitem.EdgeShopping:
		m.ResetShopping()
		return nil
	}
	return fmt.Errorf("unknown ShoppingItem edge %s", name)
}
