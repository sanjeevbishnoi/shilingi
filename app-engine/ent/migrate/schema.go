// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
	}
	// AccountInvitesColumns holds the columns for the "account_invites" table.
	AccountInvitesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"PENDING", "DECLINED", "ACCEPTED"}, Default: "PENDING"},
		{Name: "account_invites", Type: field.TypeInt, Nullable: true},
		{Name: "account_member_invite", Type: field.TypeInt, Nullable: true},
		{Name: "user_invites", Type: field.TypeInt, Nullable: true},
	}
	// AccountInvitesTable holds the schema information for the "account_invites" table.
	AccountInvitesTable = &schema.Table{
		Name:       "account_invites",
		Columns:    AccountInvitesColumns,
		PrimaryKey: []*schema.Column{AccountInvitesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_invites_accounts_invites",
				Columns:    []*schema.Column{AccountInvitesColumns[5]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "account_invites_account_members_invite",
				Columns:    []*schema.Column{AccountInvitesColumns[6]},
				RefColumns: []*schema.Column{AccountMembersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "account_invites_users_invites",
				Columns:    []*schema.Column{AccountInvitesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AccountMembersColumns holds the columns for the "account_members" table.
	AccountMembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"OWNER", "MEMBER"}},
		{Name: "account_members", Type: field.TypeInt, Nullable: true},
		{Name: "user_memberships", Type: field.TypeInt, Nullable: true},
	}
	// AccountMembersTable holds the schema information for the "account_members" table.
	AccountMembersTable = &schema.Table{
		Name:       "account_members",
		Columns:    AccountMembersColumns,
		PrimaryKey: []*schema.Column{AccountMembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_members_accounts_members",
				Columns:    []*schema.Column{AccountMembersColumns[4]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "account_members_users_memberships",
				Columns:    []*schema.Column{AccountMembersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ItemsColumns holds the columns for the "items" table.
	ItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true, Size: 250},
		{Name: "sub_label_items", Type: field.TypeInt, Nullable: true},
	}
	// ItemsTable holds the schema information for the "items" table.
	ItemsTable = &schema.Table{
		Name:       "items",
		Columns:    ItemsColumns,
		PrimaryKey: []*schema.Column{ItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "items_sub_labels_items",
				Columns:    []*schema.Column{ItemsColumns[5]},
				RefColumns: []*schema.Column{SubLabelsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ShoppingsColumns holds the columns for the "shoppings" table.
	ShoppingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "date", Type: field.TypeTime},
		{Name: "vendor_purchases", Type: field.TypeInt, Nullable: true},
	}
	// ShoppingsTable holds the schema information for the "shoppings" table.
	ShoppingsTable = &schema.Table{
		Name:       "shoppings",
		Columns:    ShoppingsColumns,
		PrimaryKey: []*schema.Column{ShoppingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "shoppings_vendors_purchases",
				Columns:    []*schema.Column{ShoppingsColumns[4]},
				RefColumns: []*schema.Column{VendorsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ShoppingItemsColumns holds the columns for the "shopping_items" table.
	ShoppingItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "quantity", Type: field.TypeFloat64, Nullable: true},
		{Name: "quantity_type", Type: field.TypeString, Nullable: true},
		{Name: "units", Type: field.TypeInt, Default: 1},
		{Name: "brand", Type: field.TypeString, Nullable: true},
		{Name: "price_per_unit", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(12,2)", "postgres": "numeric"}},
		{Name: "item_purchases", Type: field.TypeInt, Nullable: true},
		{Name: "shopping_items", Type: field.TypeInt, Nullable: true},
	}
	// ShoppingItemsTable holds the schema information for the "shopping_items" table.
	ShoppingItemsTable = &schema.Table{
		Name:       "shopping_items",
		Columns:    ShoppingItemsColumns,
		PrimaryKey: []*schema.Column{ShoppingItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "shopping_items_items_purchases",
				Columns:    []*schema.Column{ShoppingItemsColumns[8]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "shopping_items_shoppings_items",
				Columns:    []*schema.Column{ShoppingItemsColumns[9]},
				RefColumns: []*schema.Column{ShoppingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ShoppingListsColumns holds the columns for the "shopping_lists" table.
	ShoppingListsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "shopping_shopping_list", Type: field.TypeInt, Nullable: true},
	}
	// ShoppingListsTable holds the schema information for the "shopping_lists" table.
	ShoppingListsTable = &schema.Table{
		Name:       "shopping_lists",
		Columns:    ShoppingListsColumns,
		PrimaryKey: []*schema.Column{ShoppingListsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "shopping_lists_shoppings_shoppingList",
				Columns:    []*schema.Column{ShoppingListsColumns[4]},
				RefColumns: []*schema.Column{ShoppingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ShoppingListItemsColumns holds the columns for the "shopping_list_items" table.
	ShoppingListItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "note", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "item_shopping_list", Type: field.TypeInt, Nullable: true},
		{Name: "shopping_item_shopping_list", Type: field.TypeInt, Nullable: true},
		{Name: "shopping_list_items", Type: field.TypeInt, Nullable: true},
	}
	// ShoppingListItemsTable holds the schema information for the "shopping_list_items" table.
	ShoppingListItemsTable = &schema.Table{
		Name:       "shopping_list_items",
		Columns:    ShoppingListItemsColumns,
		PrimaryKey: []*schema.Column{ShoppingListItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "shopping_list_items_items_shoppingList",
				Columns:    []*schema.Column{ShoppingListItemsColumns[2]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "shopping_list_items_shopping_items_shoppingList",
				Columns:    []*schema.Column{ShoppingListItemsColumns[3]},
				RefColumns: []*schema.Column{ShoppingItemsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "shopping_list_items_shopping_lists_items",
				Columns:    []*schema.Column{ShoppingListItemsColumns[4]},
				RefColumns: []*schema.Column{ShoppingListsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SubLabelsColumns holds the columns for the "sub_labels" table.
	SubLabelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "tag_children", Type: field.TypeInt, Nullable: true},
	}
	// SubLabelsTable holds the schema information for the "sub_labels" table.
	SubLabelsTable = &schema.Table{
		Name:       "sub_labels",
		Columns:    SubLabelsColumns,
		PrimaryKey: []*schema.Column{SubLabelsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sub_labels_tags_children",
				Columns:    []*schema.Column{SubLabelsColumns[4]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "sublabel_name_tag_children",
				Unique:  true,
				Columns: []*schema.Column{SubLabelsColumns[3], SubLabelsColumns[4]},
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "tag_name",
				Unique:  false,
				Columns: []*schema.Column{TagsColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "external_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "other_names", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "is_email_verified", Type: field.TypeBool},
		{Name: "external_source", Type: field.TypeEnum, Enums: []string{"FIREBASE"}, Default: "FIREBASE"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// VendorsColumns holds the columns for the "vendors" table.
	VendorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true},
	}
	// VendorsTable holds the schema information for the "vendors" table.
	VendorsTable = &schema.Table{
		Name:       "vendors",
		Columns:    VendorsColumns,
		PrimaryKey: []*schema.Column{VendorsColumns[0]},
	}
	// ItemTagsColumns holds the columns for the "item_tags" table.
	ItemTagsColumns = []*schema.Column{
		{Name: "item_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// ItemTagsTable holds the schema information for the "item_tags" table.
	ItemTagsTable = &schema.Table{
		Name:       "item_tags",
		Columns:    ItemTagsColumns,
		PrimaryKey: []*schema.Column{ItemTagsColumns[0], ItemTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "item_tags_item_id",
				Columns:    []*schema.Column{ItemTagsColumns[0]},
				RefColumns: []*schema.Column{ItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "item_tags_tag_id",
				Columns:    []*schema.Column{ItemTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		AccountInvitesTable,
		AccountMembersTable,
		ItemsTable,
		ShoppingsTable,
		ShoppingItemsTable,
		ShoppingListsTable,
		ShoppingListItemsTable,
		SubLabelsTable,
		TagsTable,
		UsersTable,
		VendorsTable,
		ItemTagsTable,
	}
)

func init() {
	AccountInvitesTable.ForeignKeys[0].RefTable = AccountsTable
	AccountInvitesTable.ForeignKeys[1].RefTable = AccountMembersTable
	AccountInvitesTable.ForeignKeys[2].RefTable = UsersTable
	AccountMembersTable.ForeignKeys[0].RefTable = AccountsTable
	AccountMembersTable.ForeignKeys[1].RefTable = UsersTable
	ItemsTable.ForeignKeys[0].RefTable = SubLabelsTable
	ItemsTable.Annotation = &entsql.Annotation{
		Charset:   "utf8mb4",
		Collation: "utf8mb4_0900_ai_ci",
	}
	ShoppingsTable.ForeignKeys[0].RefTable = VendorsTable
	ShoppingItemsTable.ForeignKeys[0].RefTable = ItemsTable
	ShoppingItemsTable.ForeignKeys[1].RefTable = ShoppingsTable
	ShoppingListsTable.ForeignKeys[0].RefTable = ShoppingsTable
	ShoppingListsTable.Annotation = &entsql.Annotation{
		Charset:   "utf8mb4",
		Collation: "utf8mb4_0900_ai_ci",
	}
	ShoppingListItemsTable.ForeignKeys[0].RefTable = ItemsTable
	ShoppingListItemsTable.ForeignKeys[1].RefTable = ShoppingItemsTable
	ShoppingListItemsTable.ForeignKeys[2].RefTable = ShoppingListsTable
	SubLabelsTable.ForeignKeys[0].RefTable = TagsTable
	ItemTagsTable.ForeignKeys[0].RefTable = ItemsTable
	ItemTagsTable.ForeignKeys[1].RefTable = TagsTable
}
