// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kingzbauer/shilingi/app-engine/ent/shopping"
	"github.com/kingzbauer/shilingi/app-engine/ent/vendor"
)

// Shopping is the model entity for the Shopping schema.
type Shopping struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Date holds the value of the "date" field.
	// When was the shopping done
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShoppingQuery when eager-loading is set.
	Edges            ShoppingEdges `json:"edges"`
	vendor_purchases *int
}

// ShoppingEdges holds the relations/edges for other nodes in the graph.
type ShoppingEdges struct {
	// Items holds the value of the items edge.
	Items []*ShoppingItem `json:"items,omitempty"`
	// Vendor holds the value of the vendor edge.
	Vendor *Vendor `json:"vendor,omitempty"`
	// ShoppingList holds the value of the shoppingList edge.
	ShoppingList []*ShoppingList `json:"shoppingList,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ShoppingEdges) ItemsOrErr() ([]*ShoppingItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// VendorOrErr returns the Vendor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingEdges) VendorOrErr() (*Vendor, error) {
	if e.loadedTypes[1] {
		if e.Vendor == nil {
			// The edge vendor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vendor.Label}
		}
		return e.Vendor, nil
	}
	return nil, &NotLoadedError{edge: "vendor"}
}

// ShoppingListOrErr returns the ShoppingList value or an error if the edge
// was not loaded in eager-loading.
func (e ShoppingEdges) ShoppingListOrErr() ([]*ShoppingList, error) {
	if e.loadedTypes[2] {
		return e.ShoppingList, nil
	}
	return nil, &NotLoadedError{edge: "shoppingList"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shopping) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shopping.FieldID:
			values[i] = new(sql.NullInt64)
		case shopping.FieldCreateTime, shopping.FieldUpdateTime, shopping.FieldDate:
			values[i] = new(sql.NullTime)
		case shopping.ForeignKeys[0]: // vendor_purchases
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Shopping", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shopping fields.
func (s *Shopping) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shopping.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case shopping.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case shopping.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case shopping.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				s.Date = value.Time
			}
		case shopping.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vendor_purchases", value)
			} else if value.Valid {
				s.vendor_purchases = new(int)
				*s.vendor_purchases = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryItems queries the "items" edge of the Shopping entity.
func (s *Shopping) QueryItems() *ShoppingItemQuery {
	return (&ShoppingClient{config: s.config}).QueryItems(s)
}

// QueryVendor queries the "vendor" edge of the Shopping entity.
func (s *Shopping) QueryVendor() *VendorQuery {
	return (&ShoppingClient{config: s.config}).QueryVendor(s)
}

// QueryShoppingList queries the "shoppingList" edge of the Shopping entity.
func (s *Shopping) QueryShoppingList() *ShoppingListQuery {
	return (&ShoppingClient{config: s.config}).QueryShoppingList(s)
}

// Update returns a builder for updating this Shopping.
// Note that you need to call Shopping.Unwrap() before calling this method if this Shopping
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shopping) Update() *ShoppingUpdateOne {
	return (&ShoppingClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Shopping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Shopping) Unwrap() *Shopping {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shopping is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shopping) String() string {
	var builder strings.Builder
	builder.WriteString("Shopping(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", date=")
	builder.WriteString(s.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Shoppings is a parsable slice of Shopping.
type Shoppings []*Shopping

func (s Shoppings) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
