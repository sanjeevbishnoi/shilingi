// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/account"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountinvite"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountmember"
	"github.com/kingzbauer/shilingi/app-engine/ent/predicate"
	"github.com/kingzbauer/shilingi/app-engine/ent/user"
)

// AccountMemberQuery is the builder for querying AccountMember entities.
type AccountMemberQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AccountMember
	// eager-loading edges.
	withAccount *AccountQuery
	withUser    *UserQuery
	withInvite  *AccountInviteQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AccountMemberQuery builder.
func (amq *AccountMemberQuery) Where(ps ...predicate.AccountMember) *AccountMemberQuery {
	amq.predicates = append(amq.predicates, ps...)
	return amq
}

// Limit adds a limit step to the query.
func (amq *AccountMemberQuery) Limit(limit int) *AccountMemberQuery {
	amq.limit = &limit
	return amq
}

// Offset adds an offset step to the query.
func (amq *AccountMemberQuery) Offset(offset int) *AccountMemberQuery {
	amq.offset = &offset
	return amq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amq *AccountMemberQuery) Unique(unique bool) *AccountMemberQuery {
	amq.unique = &unique
	return amq
}

// Order adds an order step to the query.
func (amq *AccountMemberQuery) Order(o ...OrderFunc) *AccountMemberQuery {
	amq.order = append(amq.order, o...)
	return amq
}

// QueryAccount chains the current query on the "account" edge.
func (amq *AccountMemberQuery) QueryAccount() *AccountQuery {
	query := &AccountQuery{config: amq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountmember.Table, accountmember.FieldID, selector),
			sqlgraph.To(account.Table, account.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountmember.AccountTable, accountmember.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(amq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (amq *AccountMemberQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: amq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountmember.Table, accountmember.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, accountmember.UserTable, accountmember.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(amq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvite chains the current query on the "invite" edge.
func (amq *AccountMemberQuery) QueryInvite() *AccountInviteQuery {
	query := &AccountInviteQuery{config: amq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(accountmember.Table, accountmember.FieldID, selector),
			sqlgraph.To(accountinvite.Table, accountinvite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accountmember.InviteTable, accountmember.InviteColumn),
		)
		fromU = sqlgraph.SetNeighbors(amq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AccountMember entity from the query.
// Returns a *NotFoundError when no AccountMember was found.
func (amq *AccountMemberQuery) First(ctx context.Context) (*AccountMember, error) {
	nodes, err := amq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{accountmember.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amq *AccountMemberQuery) FirstX(ctx context.Context) *AccountMember {
	node, err := amq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AccountMember ID from the query.
// Returns a *NotFoundError when no AccountMember ID was found.
func (amq *AccountMemberQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = amq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{accountmember.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amq *AccountMemberQuery) FirstIDX(ctx context.Context) int {
	id, err := amq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AccountMember entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AccountMember entity is not found.
// Returns a *NotFoundError when no AccountMember entities are found.
func (amq *AccountMemberQuery) Only(ctx context.Context) (*AccountMember, error) {
	nodes, err := amq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{accountmember.Label}
	default:
		return nil, &NotSingularError{accountmember.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amq *AccountMemberQuery) OnlyX(ctx context.Context) *AccountMember {
	node, err := amq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AccountMember ID in the query.
// Returns a *NotSingularError when exactly one AccountMember ID is not found.
// Returns a *NotFoundError when no entities are found.
func (amq *AccountMemberQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = amq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = &NotSingularError{accountmember.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amq *AccountMemberQuery) OnlyIDX(ctx context.Context) int {
	id, err := amq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AccountMembers.
func (amq *AccountMemberQuery) All(ctx context.Context) ([]*AccountMember, error) {
	if err := amq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return amq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (amq *AccountMemberQuery) AllX(ctx context.Context) []*AccountMember {
	nodes, err := amq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AccountMember IDs.
func (amq *AccountMemberQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := amq.Select(accountmember.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amq *AccountMemberQuery) IDsX(ctx context.Context) []int {
	ids, err := amq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amq *AccountMemberQuery) Count(ctx context.Context) (int, error) {
	if err := amq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return amq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (amq *AccountMemberQuery) CountX(ctx context.Context) int {
	count, err := amq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amq *AccountMemberQuery) Exist(ctx context.Context) (bool, error) {
	if err := amq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return amq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (amq *AccountMemberQuery) ExistX(ctx context.Context) bool {
	exist, err := amq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AccountMemberQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amq *AccountMemberQuery) Clone() *AccountMemberQuery {
	if amq == nil {
		return nil
	}
	return &AccountMemberQuery{
		config:      amq.config,
		limit:       amq.limit,
		offset:      amq.offset,
		order:       append([]OrderFunc{}, amq.order...),
		predicates:  append([]predicate.AccountMember{}, amq.predicates...),
		withAccount: amq.withAccount.Clone(),
		withUser:    amq.withUser.Clone(),
		withInvite:  amq.withInvite.Clone(),
		// clone intermediate query.
		sql:  amq.sql.Clone(),
		path: amq.path,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (amq *AccountMemberQuery) WithAccount(opts ...func(*AccountQuery)) *AccountMemberQuery {
	query := &AccountQuery{config: amq.config}
	for _, opt := range opts {
		opt(query)
	}
	amq.withAccount = query
	return amq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (amq *AccountMemberQuery) WithUser(opts ...func(*UserQuery)) *AccountMemberQuery {
	query := &UserQuery{config: amq.config}
	for _, opt := range opts {
		opt(query)
	}
	amq.withUser = query
	return amq
}

// WithInvite tells the query-builder to eager-load the nodes that are connected to
// the "invite" edge. The optional arguments are used to configure the query builder of the edge.
func (amq *AccountMemberQuery) WithInvite(opts ...func(*AccountInviteQuery)) *AccountMemberQuery {
	query := &AccountInviteQuery{config: amq.config}
	for _, opt := range opts {
		opt(query)
	}
	amq.withInvite = query
	return amq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AccountMember.Query().
//		GroupBy(accountmember.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (amq *AccountMemberQuery) GroupBy(field string, fields ...string) *AccountMemberGroupBy {
	group := &AccountMemberGroupBy{config: amq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := amq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return amq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.AccountMember.Query().
//		Select(accountmember.FieldCreateTime).
//		Scan(ctx, &v)
//
func (amq *AccountMemberQuery) Select(fields ...string) *AccountMemberSelect {
	amq.fields = append(amq.fields, fields...)
	return &AccountMemberSelect{AccountMemberQuery: amq}
}

func (amq *AccountMemberQuery) prepareQuery(ctx context.Context) error {
	for _, f := range amq.fields {
		if !accountmember.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if amq.path != nil {
		prev, err := amq.path(ctx)
		if err != nil {
			return err
		}
		amq.sql = prev
	}
	return nil
}

func (amq *AccountMemberQuery) sqlAll(ctx context.Context) ([]*AccountMember, error) {
	var (
		nodes       = []*AccountMember{}
		withFKs     = amq.withFKs
		_spec       = amq.querySpec()
		loadedTypes = [3]bool{
			amq.withAccount != nil,
			amq.withUser != nil,
			amq.withInvite != nil,
		}
	)
	if amq.withAccount != nil || amq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, accountmember.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AccountMember{config: amq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, amq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := amq.withAccount; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AccountMember)
		for i := range nodes {
			if nodes[i].account_members == nil {
				continue
			}
			fk := *nodes[i].account_members
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(account.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "account_members" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Account = n
			}
		}
	}

	if query := amq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AccountMember)
		for i := range nodes {
			if nodes[i].user_memberships == nil {
				continue
			}
			fk := *nodes[i].user_memberships
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_memberships" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := amq.withInvite; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*AccountMember)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Invite = []*AccountInvite{}
		}
		query.withFKs = true
		query.Where(predicate.AccountInvite(func(s *sql.Selector) {
			s.Where(sql.InValues(accountmember.InviteColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.account_member_invite
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "account_member_invite" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "account_member_invite" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Invite = append(node.Edges.Invite, n)
		}
	}

	return nodes, nil
}

func (amq *AccountMemberQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := amq.querySpec()
	return sqlgraph.CountNodes(ctx, amq.driver, _spec)
}

func (amq *AccountMemberQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := amq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (amq *AccountMemberQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountmember.Table,
			Columns: accountmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountmember.FieldID,
			},
		},
		From:   amq.sql,
		Unique: true,
	}
	if unique := amq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := amq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountmember.FieldID)
		for i := range fields {
			if fields[i] != accountmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := amq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amq *AccountMemberQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amq.driver.Dialect())
	t1 := builder.Table(accountmember.Table)
	columns := amq.fields
	if len(columns) == 0 {
		columns = accountmember.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amq.sql != nil {
		selector = amq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range amq.predicates {
		p(selector)
	}
	for _, p := range amq.order {
		p(selector)
	}
	if offset := amq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AccountMemberGroupBy is the group-by builder for AccountMember entities.
type AccountMemberGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amgb *AccountMemberGroupBy) Aggregate(fns ...AggregateFunc) *AccountMemberGroupBy {
	amgb.fns = append(amgb.fns, fns...)
	return amgb
}

// Scan applies the group-by query and scans the result into the given value.
func (amgb *AccountMemberGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := amgb.path(ctx)
	if err != nil {
		return err
	}
	amgb.sql = query
	return amgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := amgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(amgb.fields) > 1 {
		return nil, errors.New("ent: AccountMemberGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := amgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) StringsX(ctx context.Context) []string {
	v, err := amgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = amgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) StringX(ctx context.Context) string {
	v, err := amgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(amgb.fields) > 1 {
		return nil, errors.New("ent: AccountMemberGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := amgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) IntsX(ctx context.Context) []int {
	v, err := amgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = amgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) IntX(ctx context.Context) int {
	v, err := amgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(amgb.fields) > 1 {
		return nil, errors.New("ent: AccountMemberGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := amgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := amgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = amgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) Float64X(ctx context.Context) float64 {
	v, err := amgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(amgb.fields) > 1 {
		return nil, errors.New("ent: AccountMemberGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := amgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := amgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (amgb *AccountMemberGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = amgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (amgb *AccountMemberGroupBy) BoolX(ctx context.Context) bool {
	v, err := amgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (amgb *AccountMemberGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range amgb.fields {
		if !accountmember.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := amgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (amgb *AccountMemberGroupBy) sqlQuery() *sql.Selector {
	selector := amgb.sql.Select()
	aggregation := make([]string, 0, len(amgb.fns))
	for _, fn := range amgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(amgb.fields)+len(amgb.fns))
		for _, f := range amgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(amgb.fields...)...)
}

// AccountMemberSelect is the builder for selecting fields of AccountMember entities.
type AccountMemberSelect struct {
	*AccountMemberQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ams *AccountMemberSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ams.prepareQuery(ctx); err != nil {
		return err
	}
	ams.sql = ams.AccountMemberQuery.sqlQuery(ctx)
	return ams.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ams *AccountMemberSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ams.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ams.fields) > 1 {
		return nil, errors.New("ent: AccountMemberSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ams.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ams *AccountMemberSelect) StringsX(ctx context.Context) []string {
	v, err := ams.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ams.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ams *AccountMemberSelect) StringX(ctx context.Context) string {
	v, err := ams.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ams.fields) > 1 {
		return nil, errors.New("ent: AccountMemberSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ams.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ams *AccountMemberSelect) IntsX(ctx context.Context) []int {
	v, err := ams.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ams.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ams *AccountMemberSelect) IntX(ctx context.Context) int {
	v, err := ams.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ams.fields) > 1 {
		return nil, errors.New("ent: AccountMemberSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ams.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ams *AccountMemberSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ams.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ams.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ams *AccountMemberSelect) Float64X(ctx context.Context) float64 {
	v, err := ams.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ams.fields) > 1 {
		return nil, errors.New("ent: AccountMemberSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ams.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ams *AccountMemberSelect) BoolsX(ctx context.Context) []bool {
	v, err := ams.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ams *AccountMemberSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ams.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{accountmember.Label}
	default:
		err = fmt.Errorf("ent: AccountMemberSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ams *AccountMemberSelect) BoolX(ctx context.Context) bool {
	v, err := ams.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ams *AccountMemberSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ams.sql.Query()
	if err := ams.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
