// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kingzbauer/shilingi/app-engine/ent/account"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountinvite"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountmember"
	"github.com/kingzbauer/shilingi/app-engine/ent/user"
)

// AccountInvite is the model entity for the AccountInvite schema.
type AccountInvite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Email holds the value of the "email" field.
	// Email for the invited user
	Email string `json:"email,omitempty"`
	// Status holds the value of the "status" field.
	Status accountinvite.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountInviteQuery when eager-loading is set.
	Edges                 AccountInviteEdges `json:"edges"`
	account_invites       *int
	account_member_invite *int
	user_invites          *int
}

// AccountInviteEdges holds the relations/edges for other nodes in the graph.
type AccountInviteEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Member holds the value of the member edge.
	Member *AccountMember `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountInviteEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountInviteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountInviteEdges) MemberOrErr() (*AccountMember, error) {
	if e.loadedTypes[2] {
		if e.Member == nil {
			// The edge member was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: accountmember.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountInvite) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountinvite.FieldID:
			values[i] = new(sql.NullInt64)
		case accountinvite.FieldEmail, accountinvite.FieldStatus:
			values[i] = new(sql.NullString)
		case accountinvite.FieldCreateTime, accountinvite.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case accountinvite.ForeignKeys[0]: // account_invites
			values[i] = new(sql.NullInt64)
		case accountinvite.ForeignKeys[1]: // account_member_invite
			values[i] = new(sql.NullInt64)
		case accountinvite.ForeignKeys[2]: // user_invites
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountInvite", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountInvite fields.
func (ai *AccountInvite) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountinvite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ai.ID = int(value.Int64)
		case accountinvite.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ai.CreateTime = value.Time
			}
		case accountinvite.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ai.UpdateTime = value.Time
			}
		case accountinvite.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ai.Email = value.String
			}
		case accountinvite.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ai.Status = accountinvite.Status(value.String)
			}
		case accountinvite.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_invites", value)
			} else if value.Valid {
				ai.account_invites = new(int)
				*ai.account_invites = int(value.Int64)
			}
		case accountinvite.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_member_invite", value)
			} else if value.Valid {
				ai.account_member_invite = new(int)
				*ai.account_member_invite = int(value.Int64)
			}
		case accountinvite.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_invites", value)
			} else if value.Valid {
				ai.user_invites = new(int)
				*ai.user_invites = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the AccountInvite entity.
func (ai *AccountInvite) QueryAccount() *AccountQuery {
	return (&AccountInviteClient{config: ai.config}).QueryAccount(ai)
}

// QueryUser queries the "user" edge of the AccountInvite entity.
func (ai *AccountInvite) QueryUser() *UserQuery {
	return (&AccountInviteClient{config: ai.config}).QueryUser(ai)
}

// QueryMember queries the "member" edge of the AccountInvite entity.
func (ai *AccountInvite) QueryMember() *AccountMemberQuery {
	return (&AccountInviteClient{config: ai.config}).QueryMember(ai)
}

// Update returns a builder for updating this AccountInvite.
// Note that you need to call AccountInvite.Unwrap() before calling this method if this AccountInvite
// was returned from a transaction, and the transaction was committed or rolled back.
func (ai *AccountInvite) Update() *AccountInviteUpdateOne {
	return (&AccountInviteClient{config: ai.config}).UpdateOne(ai)
}

// Unwrap unwraps the AccountInvite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ai *AccountInvite) Unwrap() *AccountInvite {
	tx, ok := ai.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountInvite is not a transactional entity")
	}
	ai.config.driver = tx.drv
	return ai
}

// String implements the fmt.Stringer.
func (ai *AccountInvite) String() string {
	var builder strings.Builder
	builder.WriteString("AccountInvite(")
	builder.WriteString(fmt.Sprintf("id=%v", ai.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(ai.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(ai.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", email=")
	builder.WriteString(ai.Email)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ai.Status))
	builder.WriteByte(')')
	return builder.String()
}

// AccountInvites is a parsable slice of AccountInvite.
type AccountInvites []*AccountInvite

func (ai AccountInvites) config(cfg config) {
	for _i := range ai {
		ai[_i].config = cfg
	}
}
