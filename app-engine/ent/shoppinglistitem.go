// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/kingzbauer/shilingi/app-engine/ent/item"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppingitem"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglist"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglistitem"
)

// ShoppingListItem is the model entity for the ShoppingListItem schema.
type ShoppingListItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Note holds the value of the "note" field.
	// Additional details about the shopping list entry
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShoppingListItemQuery when eager-loading is set.
	Edges                       ShoppingListItemEdges `json:"edges"`
	item_shopping_list          *int
	shopping_item_shopping_list *int
	shopping_list_items         *int
}

// ShoppingListItemEdges holds the relations/edges for other nodes in the graph.
type ShoppingListItemEdges struct {
	// ShoppingList holds the value of the shoppingList edge.
	ShoppingList *ShoppingList `json:"shoppingList,omitempty"`
	// Item holds the value of the item edge.
	Item *Item `json:"item,omitempty"`
	// Purchase holds the value of the purchase edge.
	Purchase *ShoppingItem `json:"purchase,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ShoppingListOrErr returns the ShoppingList value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingListItemEdges) ShoppingListOrErr() (*ShoppingList, error) {
	if e.loadedTypes[0] {
		if e.ShoppingList == nil {
			// The edge shoppingList was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shoppinglist.Label}
		}
		return e.ShoppingList, nil
	}
	return nil, &NotLoadedError{edge: "shoppingList"}
}

// ItemOrErr returns the Item value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingListItemEdges) ItemOrErr() (*Item, error) {
	if e.loadedTypes[1] {
		if e.Item == nil {
			// The edge item was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: item.Label}
		}
		return e.Item, nil
	}
	return nil, &NotLoadedError{edge: "item"}
}

// PurchaseOrErr returns the Purchase value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingListItemEdges) PurchaseOrErr() (*ShoppingItem, error) {
	if e.loadedTypes[2] {
		if e.Purchase == nil {
			// The edge purchase was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shoppingitem.Label}
		}
		return e.Purchase, nil
	}
	return nil, &NotLoadedError{edge: "purchase"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShoppingListItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shoppinglistitem.FieldID:
			values[i] = new(sql.NullInt64)
		case shoppinglistitem.FieldNote:
			values[i] = new(sql.NullString)
		case shoppinglistitem.ForeignKeys[0]: // item_shopping_list
			values[i] = new(sql.NullInt64)
		case shoppinglistitem.ForeignKeys[1]: // shopping_item_shopping_list
			values[i] = new(sql.NullInt64)
		case shoppinglistitem.ForeignKeys[2]: // shopping_list_items
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShoppingListItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShoppingListItem fields.
func (sli *ShoppingListItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shoppinglistitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sli.ID = int(value.Int64)
		case shoppinglistitem.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				sli.Note = value.String
			}
		case shoppinglistitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field item_shopping_list", value)
			} else if value.Valid {
				sli.item_shopping_list = new(int)
				*sli.item_shopping_list = int(value.Int64)
			}
		case shoppinglistitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shopping_item_shopping_list", value)
			} else if value.Valid {
				sli.shopping_item_shopping_list = new(int)
				*sli.shopping_item_shopping_list = int(value.Int64)
			}
		case shoppinglistitem.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shopping_list_items", value)
			} else if value.Valid {
				sli.shopping_list_items = new(int)
				*sli.shopping_list_items = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShoppingList queries the "shoppingList" edge of the ShoppingListItem entity.
func (sli *ShoppingListItem) QueryShoppingList() *ShoppingListQuery {
	return (&ShoppingListItemClient{config: sli.config}).QueryShoppingList(sli)
}

// QueryItem queries the "item" edge of the ShoppingListItem entity.
func (sli *ShoppingListItem) QueryItem() *ItemQuery {
	return (&ShoppingListItemClient{config: sli.config}).QueryItem(sli)
}

// QueryPurchase queries the "purchase" edge of the ShoppingListItem entity.
func (sli *ShoppingListItem) QueryPurchase() *ShoppingItemQuery {
	return (&ShoppingListItemClient{config: sli.config}).QueryPurchase(sli)
}

// Update returns a builder for updating this ShoppingListItem.
// Note that you need to call ShoppingListItem.Unwrap() before calling this method if this ShoppingListItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (sli *ShoppingListItem) Update() *ShoppingListItemUpdateOne {
	return (&ShoppingListItemClient{config: sli.config}).UpdateOne(sli)
}

// Unwrap unwraps the ShoppingListItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sli *ShoppingListItem) Unwrap() *ShoppingListItem {
	tx, ok := sli.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShoppingListItem is not a transactional entity")
	}
	sli.config.driver = tx.drv
	return sli
}

// String implements the fmt.Stringer.
func (sli *ShoppingListItem) String() string {
	var builder strings.Builder
	builder.WriteString("ShoppingListItem(")
	builder.WriteString(fmt.Sprintf("id=%v", sli.ID))
	builder.WriteString(", note=")
	builder.WriteString(sli.Note)
	builder.WriteByte(')')
	return builder.String()
}

// ShoppingListItems is a parsable slice of ShoppingListItem.
type ShoppingListItems []*ShoppingListItem

func (sli ShoppingListItems) config(cfg config) {
	for _i := range sli {
		sli[_i].config = cfg
	}
}
