// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/item"
	"github.com/kingzbauer/shilingi/app-engine/ent/predicate"
	"github.com/kingzbauer/shilingi/app-engine/ent/sublabel"
	"github.com/kingzbauer/shilingi/app-engine/ent/tag"
)

// SubLabelUpdate is the builder for updating SubLabel entities.
type SubLabelUpdate struct {
	config
	hooks    []Hook
	mutation *SubLabelMutation
}

// Where appends a list predicates to the SubLabelUpdate builder.
func (slu *SubLabelUpdate) Where(ps ...predicate.SubLabel) *SubLabelUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetName sets the "name" field.
func (slu *SubLabelUpdate) SetName(s string) *SubLabelUpdate {
	slu.mutation.SetName(s)
	return slu
}

// SetParentID sets the "parent" edge to the Tag entity by ID.
func (slu *SubLabelUpdate) SetParentID(id int) *SubLabelUpdate {
	slu.mutation.SetParentID(id)
	return slu
}

// SetNillableParentID sets the "parent" edge to the Tag entity by ID if the given value is not nil.
func (slu *SubLabelUpdate) SetNillableParentID(id *int) *SubLabelUpdate {
	if id != nil {
		slu = slu.SetParentID(*id)
	}
	return slu
}

// SetParent sets the "parent" edge to the Tag entity.
func (slu *SubLabelUpdate) SetParent(t *Tag) *SubLabelUpdate {
	return slu.SetParentID(t.ID)
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (slu *SubLabelUpdate) AddItemIDs(ids ...int) *SubLabelUpdate {
	slu.mutation.AddItemIDs(ids...)
	return slu
}

// AddItems adds the "items" edges to the Item entity.
func (slu *SubLabelUpdate) AddItems(i ...*Item) *SubLabelUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return slu.AddItemIDs(ids...)
}

// Mutation returns the SubLabelMutation object of the builder.
func (slu *SubLabelUpdate) Mutation() *SubLabelMutation {
	return slu.mutation
}

// ClearParent clears the "parent" edge to the Tag entity.
func (slu *SubLabelUpdate) ClearParent() *SubLabelUpdate {
	slu.mutation.ClearParent()
	return slu
}

// ClearItems clears all "items" edges to the Item entity.
func (slu *SubLabelUpdate) ClearItems() *SubLabelUpdate {
	slu.mutation.ClearItems()
	return slu
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (slu *SubLabelUpdate) RemoveItemIDs(ids ...int) *SubLabelUpdate {
	slu.mutation.RemoveItemIDs(ids...)
	return slu
}

// RemoveItems removes "items" edges to Item entities.
func (slu *SubLabelUpdate) RemoveItems(i ...*Item) *SubLabelUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return slu.RemoveItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SubLabelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	slu.defaults()
	if len(slu.hooks) == 0 {
		affected, err = slu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			slu.mutation = mutation
			affected, err = slu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(slu.hooks) - 1; i >= 0; i-- {
			if slu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SubLabelUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SubLabelUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SubLabelUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *SubLabelUpdate) defaults() {
	if _, ok := slu.mutation.UpdateTime(); !ok {
		v := sublabel.UpdateDefaultUpdateTime()
		slu.mutation.SetUpdateTime(v)
	}
}

func (slu *SubLabelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sublabel.Table,
			Columns: sublabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sublabel.FieldID,
			},
		},
	}
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sublabel.FieldUpdateTime,
		})
	}
	if value, ok := slu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sublabel.FieldName,
		})
	}
	if slu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sublabel.ParentTable,
			Columns: []string{sublabel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sublabel.ParentTable,
			Columns: []string{sublabel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if slu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sublabel.ItemsTable,
			Columns: []string{sublabel.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !slu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sublabel.ItemsTable,
			Columns: []string{sublabel.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sublabel.ItemsTable,
			Columns: []string{sublabel.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sublabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SubLabelUpdateOne is the builder for updating a single SubLabel entity.
type SubLabelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubLabelMutation
}

// SetName sets the "name" field.
func (sluo *SubLabelUpdateOne) SetName(s string) *SubLabelUpdateOne {
	sluo.mutation.SetName(s)
	return sluo
}

// SetParentID sets the "parent" edge to the Tag entity by ID.
func (sluo *SubLabelUpdateOne) SetParentID(id int) *SubLabelUpdateOne {
	sluo.mutation.SetParentID(id)
	return sluo
}

// SetNillableParentID sets the "parent" edge to the Tag entity by ID if the given value is not nil.
func (sluo *SubLabelUpdateOne) SetNillableParentID(id *int) *SubLabelUpdateOne {
	if id != nil {
		sluo = sluo.SetParentID(*id)
	}
	return sluo
}

// SetParent sets the "parent" edge to the Tag entity.
func (sluo *SubLabelUpdateOne) SetParent(t *Tag) *SubLabelUpdateOne {
	return sluo.SetParentID(t.ID)
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (sluo *SubLabelUpdateOne) AddItemIDs(ids ...int) *SubLabelUpdateOne {
	sluo.mutation.AddItemIDs(ids...)
	return sluo
}

// AddItems adds the "items" edges to the Item entity.
func (sluo *SubLabelUpdateOne) AddItems(i ...*Item) *SubLabelUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sluo.AddItemIDs(ids...)
}

// Mutation returns the SubLabelMutation object of the builder.
func (sluo *SubLabelUpdateOne) Mutation() *SubLabelMutation {
	return sluo.mutation
}

// ClearParent clears the "parent" edge to the Tag entity.
func (sluo *SubLabelUpdateOne) ClearParent() *SubLabelUpdateOne {
	sluo.mutation.ClearParent()
	return sluo
}

// ClearItems clears all "items" edges to the Item entity.
func (sluo *SubLabelUpdateOne) ClearItems() *SubLabelUpdateOne {
	sluo.mutation.ClearItems()
	return sluo
}

// RemoveItemIDs removes the "items" edge to Item entities by IDs.
func (sluo *SubLabelUpdateOne) RemoveItemIDs(ids ...int) *SubLabelUpdateOne {
	sluo.mutation.RemoveItemIDs(ids...)
	return sluo
}

// RemoveItems removes "items" edges to Item entities.
func (sluo *SubLabelUpdateOne) RemoveItems(i ...*Item) *SubLabelUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sluo.RemoveItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SubLabelUpdateOne) Select(field string, fields ...string) *SubLabelUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SubLabel entity.
func (sluo *SubLabelUpdateOne) Save(ctx context.Context) (*SubLabel, error) {
	var (
		err  error
		node *SubLabel
	)
	sluo.defaults()
	if len(sluo.hooks) == 0 {
		node, err = sluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubLabelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sluo.mutation = mutation
			node, err = sluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sluo.hooks) - 1; i >= 0; i-- {
			if sluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SubLabelUpdateOne) SaveX(ctx context.Context) *SubLabel {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SubLabelUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SubLabelUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *SubLabelUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdateTime(); !ok {
		v := sublabel.UpdateDefaultUpdateTime()
		sluo.mutation.SetUpdateTime(v)
	}
}

func (sluo *SubLabelUpdateOne) sqlSave(ctx context.Context) (_node *SubLabel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sublabel.Table,
			Columns: sublabel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sublabel.FieldID,
			},
		},
	}
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SubLabel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sublabel.FieldID)
		for _, f := range fields {
			if !sublabel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sublabel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sublabel.FieldUpdateTime,
		})
	}
	if value, ok := sluo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sublabel.FieldName,
		})
	}
	if sluo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sublabel.ParentTable,
			Columns: []string{sublabel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sublabel.ParentTable,
			Columns: []string{sublabel.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sublabel.ItemsTable,
			Columns: []string{sublabel.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !sluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sublabel.ItemsTable,
			Columns: []string{sublabel.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sublabel.ItemsTable,
			Columns: []string{sublabel.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubLabel{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sublabel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
