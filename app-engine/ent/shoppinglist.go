// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kingzbauer/shilingi/app-engine/ent/shopping"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglist"
)

// ShoppingList is the model entity for the ShoppingList schema.
type ShoppingList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	// Custom name for the shopping list
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShoppingListQuery when eager-loading is set.
	Edges                  ShoppingListEdges `json:"edges"`
	shopping_shopping_list *int
}

// ShoppingListEdges holds the relations/edges for other nodes in the graph.
type ShoppingListEdges struct {
	// Items holds the value of the items edge.
	Items []*ShoppingListItem `json:"items,omitempty"`
	// Purchases holds the value of the purchases edge.
	Purchases *Shopping `json:"purchases,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ShoppingListEdges) ItemsOrErr() ([]*ShoppingListItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// PurchasesOrErr returns the Purchases value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingListEdges) PurchasesOrErr() (*Shopping, error) {
	if e.loadedTypes[1] {
		if e.Purchases == nil {
			// The edge purchases was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shopping.Label}
		}
		return e.Purchases, nil
	}
	return nil, &NotLoadedError{edge: "purchases"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShoppingList) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shoppinglist.FieldID:
			values[i] = new(sql.NullInt64)
		case shoppinglist.FieldName:
			values[i] = new(sql.NullString)
		case shoppinglist.FieldCreateTime, shoppinglist.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case shoppinglist.ForeignKeys[0]: // shopping_shopping_list
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShoppingList", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShoppingList fields.
func (sl *ShoppingList) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shoppinglist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case shoppinglist.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sl.CreateTime = value.Time
			}
		case shoppinglist.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sl.UpdateTime = value.Time
			}
		case shoppinglist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sl.Name = value.String
			}
		case shoppinglist.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shopping_shopping_list", value)
			} else if value.Valid {
				sl.shopping_shopping_list = new(int)
				*sl.shopping_shopping_list = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryItems queries the "items" edge of the ShoppingList entity.
func (sl *ShoppingList) QueryItems() *ShoppingListItemQuery {
	return (&ShoppingListClient{config: sl.config}).QueryItems(sl)
}

// QueryPurchases queries the "purchases" edge of the ShoppingList entity.
func (sl *ShoppingList) QueryPurchases() *ShoppingQuery {
	return (&ShoppingListClient{config: sl.config}).QueryPurchases(sl)
}

// Update returns a builder for updating this ShoppingList.
// Note that you need to call ShoppingList.Unwrap() before calling this method if this ShoppingList
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *ShoppingList) Update() *ShoppingListUpdateOne {
	return (&ShoppingListClient{config: sl.config}).UpdateOne(sl)
}

// Unwrap unwraps the ShoppingList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *ShoppingList) Unwrap() *ShoppingList {
	tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShoppingList is not a transactional entity")
	}
	sl.config.driver = tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *ShoppingList) String() string {
	var builder strings.Builder
	builder.WriteString("ShoppingList(")
	builder.WriteString(fmt.Sprintf("id=%v", sl.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sl.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sl.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(sl.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ShoppingLists is a parsable slice of ShoppingList.
type ShoppingLists []*ShoppingList

func (sl ShoppingLists) config(cfg config) {
	for _i := range sl {
		sl[_i].config = cfg
	}
}
