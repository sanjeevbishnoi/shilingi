// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AccountQuery) CollectFields(ctx context.Context, satisfies ...string) *AccountQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *AccountQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AccountQuery {
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ai *AccountInviteQuery) CollectFields(ctx context.Context, satisfies ...string) *AccountInviteQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		ai = ai.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return ai
}

func (ai *AccountInviteQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AccountInviteQuery {
	return ai
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (am *AccountMemberQuery) CollectFields(ctx context.Context, satisfies ...string) *AccountMemberQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		am = am.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return am
}

func (am *AccountMemberQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *AccountMemberQuery {
	return am
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *ItemQuery) CollectFields(ctx context.Context, satisfies ...string) *ItemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *ItemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ItemQuery {
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ShoppingQuery) CollectFields(ctx context.Context, satisfies ...string) *ShoppingQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *ShoppingQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShoppingQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "items":
			s = s.WithItems(func(query *ShoppingItemQuery) {
				query.collectField(ctx, field)
			})
		case "vendor":
			s = s.WithVendor(func(query *VendorQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (si *ShoppingItemQuery) CollectFields(ctx context.Context, satisfies ...string) *ShoppingItemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		si = si.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return si
}

func (si *ShoppingItemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShoppingItemQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "item":
			si = si.WithItem(func(query *ItemQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return si
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sl *ShoppingListQuery) CollectFields(ctx context.Context, satisfies ...string) *ShoppingListQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		sl = sl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return sl
}

func (sl *ShoppingListQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShoppingListQuery {
	return sl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sli *ShoppingListItemQuery) CollectFields(ctx context.Context, satisfies ...string) *ShoppingListItemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		sli = sli.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return sli
}

func (sli *ShoppingListItemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShoppingListItemQuery {
	return sli
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sl *SubLabelQuery) CollectFields(ctx context.Context, satisfies ...string) *SubLabelQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		sl = sl.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return sl
}

func (sl *SubLabelQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *SubLabelQuery {
	return sl
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TagQuery) CollectFields(ctx context.Context, satisfies ...string) *TagQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TagQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TagQuery {
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (v *VendorQuery) CollectFields(ctx context.Context, satisfies ...string) *VendorQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		v = v.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return v
}

func (v *VendorQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *VendorQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "purchases":
			v = v.WithPurchases(func(query *ShoppingQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return v
}
