// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *ItemQuery) CollectFields(ctx context.Context, satisfies ...string) *ItemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *ItemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ItemQuery {
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *ShoppingQuery) CollectFields(ctx context.Context, satisfies ...string) *ShoppingQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *ShoppingQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShoppingQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "items":
			s = s.WithItems(func(query *ShoppingItemQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (si *ShoppingItemQuery) CollectFields(ctx context.Context, satisfies ...string) *ShoppingItemQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		si = si.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return si
}

func (si *ShoppingItemQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ShoppingItemQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "item":
			si = si.WithItem(func(query *ItemQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return si
}
