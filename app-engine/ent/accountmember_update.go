// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/account"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountinvite"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountmember"
	"github.com/kingzbauer/shilingi/app-engine/ent/predicate"
	"github.com/kingzbauer/shilingi/app-engine/ent/user"
)

// AccountMemberUpdate is the builder for updating AccountMember entities.
type AccountMemberUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMemberMutation
}

// Where appends a list predicates to the AccountMemberUpdate builder.
func (amu *AccountMemberUpdate) Where(ps ...predicate.AccountMember) *AccountMemberUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetType sets the "type" field.
func (amu *AccountMemberUpdate) SetType(a accountmember.Type) *AccountMemberUpdate {
	amu.mutation.SetType(a)
	return amu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (amu *AccountMemberUpdate) SetAccountID(id int) *AccountMemberUpdate {
	amu.mutation.SetAccountID(id)
	return amu
}

// SetAccount sets the "account" edge to the Account entity.
func (amu *AccountMemberUpdate) SetAccount(a *Account) *AccountMemberUpdate {
	return amu.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (amu *AccountMemberUpdate) SetUserID(id int) *AccountMemberUpdate {
	amu.mutation.SetUserID(id)
	return amu
}

// SetUser sets the "user" edge to the User entity.
func (amu *AccountMemberUpdate) SetUser(u *User) *AccountMemberUpdate {
	return amu.SetUserID(u.ID)
}

// AddInviteIDs adds the "invite" edge to the AccountInvite entity by IDs.
func (amu *AccountMemberUpdate) AddInviteIDs(ids ...int) *AccountMemberUpdate {
	amu.mutation.AddInviteIDs(ids...)
	return amu
}

// AddInvite adds the "invite" edges to the AccountInvite entity.
func (amu *AccountMemberUpdate) AddInvite(a ...*AccountInvite) *AccountMemberUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.AddInviteIDs(ids...)
}

// Mutation returns the AccountMemberMutation object of the builder.
func (amu *AccountMemberUpdate) Mutation() *AccountMemberMutation {
	return amu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (amu *AccountMemberUpdate) ClearAccount() *AccountMemberUpdate {
	amu.mutation.ClearAccount()
	return amu
}

// ClearUser clears the "user" edge to the User entity.
func (amu *AccountMemberUpdate) ClearUser() *AccountMemberUpdate {
	amu.mutation.ClearUser()
	return amu
}

// ClearInvite clears all "invite" edges to the AccountInvite entity.
func (amu *AccountMemberUpdate) ClearInvite() *AccountMemberUpdate {
	amu.mutation.ClearInvite()
	return amu
}

// RemoveInviteIDs removes the "invite" edge to AccountInvite entities by IDs.
func (amu *AccountMemberUpdate) RemoveInviteIDs(ids ...int) *AccountMemberUpdate {
	amu.mutation.RemoveInviteIDs(ids...)
	return amu
}

// RemoveInvite removes "invite" edges to AccountInvite entities.
func (amu *AccountMemberUpdate) RemoveInvite(a ...*AccountInvite) *AccountMemberUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.RemoveInviteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AccountMemberUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	amu.defaults()
	if len(amu.hooks) == 0 {
		if err = amu.check(); err != nil {
			return 0, err
		}
		affected, err = amu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amu.check(); err != nil {
				return 0, err
			}
			amu.mutation = mutation
			affected, err = amu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(amu.hooks) - 1; i >= 0; i-- {
			if amu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = amu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AccountMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AccountMemberUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AccountMemberUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amu *AccountMemberUpdate) defaults() {
	if _, ok := amu.mutation.UpdateTime(); !ok {
		v := accountmember.UpdateDefaultUpdateTime()
		amu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amu *AccountMemberUpdate) check() error {
	if v, ok := amu.mutation.GetType(); ok {
		if err := accountmember.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := amu.mutation.AccountID(); amu.mutation.AccountCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"account\"")
	}
	if _, ok := amu.mutation.UserID(); amu.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (amu *AccountMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountmember.Table,
			Columns: accountmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountmember.FieldID,
			},
		},
	}
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountmember.FieldUpdateTime,
		})
	}
	if value, ok := amu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountmember.FieldType,
		})
	}
	if amu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.AccountTable,
			Columns: []string{accountmember.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.AccountTable,
			Columns: []string{accountmember.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.UserTable,
			Columns: []string{accountmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.UserTable,
			Columns: []string{accountmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accountmember.InviteTable,
			Columns: []string{accountmember.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountinvite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedInviteIDs(); len(nodes) > 0 && !amu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accountmember.InviteTable,
			Columns: []string{accountmember.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountinvite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accountmember.InviteTable,
			Columns: []string{accountmember.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountinvite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AccountMemberUpdateOne is the builder for updating a single AccountMember entity.
type AccountMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMemberMutation
}

// SetType sets the "type" field.
func (amuo *AccountMemberUpdateOne) SetType(a accountmember.Type) *AccountMemberUpdateOne {
	amuo.mutation.SetType(a)
	return amuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (amuo *AccountMemberUpdateOne) SetAccountID(id int) *AccountMemberUpdateOne {
	amuo.mutation.SetAccountID(id)
	return amuo
}

// SetAccount sets the "account" edge to the Account entity.
func (amuo *AccountMemberUpdateOne) SetAccount(a *Account) *AccountMemberUpdateOne {
	return amuo.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (amuo *AccountMemberUpdateOne) SetUserID(id int) *AccountMemberUpdateOne {
	amuo.mutation.SetUserID(id)
	return amuo
}

// SetUser sets the "user" edge to the User entity.
func (amuo *AccountMemberUpdateOne) SetUser(u *User) *AccountMemberUpdateOne {
	return amuo.SetUserID(u.ID)
}

// AddInviteIDs adds the "invite" edge to the AccountInvite entity by IDs.
func (amuo *AccountMemberUpdateOne) AddInviteIDs(ids ...int) *AccountMemberUpdateOne {
	amuo.mutation.AddInviteIDs(ids...)
	return amuo
}

// AddInvite adds the "invite" edges to the AccountInvite entity.
func (amuo *AccountMemberUpdateOne) AddInvite(a ...*AccountInvite) *AccountMemberUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.AddInviteIDs(ids...)
}

// Mutation returns the AccountMemberMutation object of the builder.
func (amuo *AccountMemberUpdateOne) Mutation() *AccountMemberMutation {
	return amuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (amuo *AccountMemberUpdateOne) ClearAccount() *AccountMemberUpdateOne {
	amuo.mutation.ClearAccount()
	return amuo
}

// ClearUser clears the "user" edge to the User entity.
func (amuo *AccountMemberUpdateOne) ClearUser() *AccountMemberUpdateOne {
	amuo.mutation.ClearUser()
	return amuo
}

// ClearInvite clears all "invite" edges to the AccountInvite entity.
func (amuo *AccountMemberUpdateOne) ClearInvite() *AccountMemberUpdateOne {
	amuo.mutation.ClearInvite()
	return amuo
}

// RemoveInviteIDs removes the "invite" edge to AccountInvite entities by IDs.
func (amuo *AccountMemberUpdateOne) RemoveInviteIDs(ids ...int) *AccountMemberUpdateOne {
	amuo.mutation.RemoveInviteIDs(ids...)
	return amuo
}

// RemoveInvite removes "invite" edges to AccountInvite entities.
func (amuo *AccountMemberUpdateOne) RemoveInvite(a ...*AccountInvite) *AccountMemberUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.RemoveInviteIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AccountMemberUpdateOne) Select(field string, fields ...string) *AccountMemberUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AccountMember entity.
func (amuo *AccountMemberUpdateOne) Save(ctx context.Context) (*AccountMember, error) {
	var (
		err  error
		node *AccountMember
	)
	amuo.defaults()
	if len(amuo.hooks) == 0 {
		if err = amuo.check(); err != nil {
			return nil, err
		}
		node, err = amuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amuo.check(); err != nil {
				return nil, err
			}
			amuo.mutation = mutation
			node, err = amuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(amuo.hooks) - 1; i >= 0; i-- {
			if amuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = amuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AccountMemberUpdateOne) SaveX(ctx context.Context) *AccountMember {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AccountMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AccountMemberUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuo *AccountMemberUpdateOne) defaults() {
	if _, ok := amuo.mutation.UpdateTime(); !ok {
		v := accountmember.UpdateDefaultUpdateTime()
		amuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amuo *AccountMemberUpdateOne) check() error {
	if v, ok := amuo.mutation.GetType(); ok {
		if err := accountmember.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if _, ok := amuo.mutation.AccountID(); amuo.mutation.AccountCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"account\"")
	}
	if _, ok := amuo.mutation.UserID(); amuo.mutation.UserCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"user\"")
	}
	return nil
}

func (amuo *AccountMemberUpdateOne) sqlSave(ctx context.Context) (_node *AccountMember, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountmember.Table,
			Columns: accountmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountmember.FieldID,
			},
		},
	}
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AccountMember.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accountmember.FieldID)
		for _, f := range fields {
			if !accountmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accountmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountmember.FieldUpdateTime,
		})
	}
	if value, ok := amuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountmember.FieldType,
		})
	}
	if amuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.AccountTable,
			Columns: []string{accountmember.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.AccountTable,
			Columns: []string{accountmember.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.UserTable,
			Columns: []string{accountmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.UserTable,
			Columns: []string{accountmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accountmember.InviteTable,
			Columns: []string{accountmember.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountinvite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedInviteIDs(); len(nodes) > 0 && !amuo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accountmember.InviteTable,
			Columns: []string{accountmember.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountinvite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accountmember.InviteTable,
			Columns: []string{accountmember.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountinvite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccountMember{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accountmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
