// Code generated by entc, DO NOT EDIT.

package shoppinglistitem

const (
	// Label holds the string label denoting the shoppinglistitem type in the database.
	Label = "shopping_list_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// EdgeShoppingList holds the string denoting the shoppinglist edge name in mutations.
	EdgeShoppingList = "shoppingList"
	// EdgeItem holds the string denoting the item edge name in mutations.
	EdgeItem = "item"
	// EdgePurchase holds the string denoting the purchase edge name in mutations.
	EdgePurchase = "purchase"
	// Table holds the table name of the shoppinglistitem in the database.
	Table = "shopping_list_items"
	// ShoppingListTable is the table that holds the shoppingList relation/edge.
	ShoppingListTable = "shopping_list_items"
	// ShoppingListInverseTable is the table name for the ShoppingList entity.
	// It exists in this package in order to avoid circular dependency with the "shoppinglist" package.
	ShoppingListInverseTable = "shopping_lists"
	// ShoppingListColumn is the table column denoting the shoppingList relation/edge.
	ShoppingListColumn = "shopping_list_items"
	// ItemTable is the table that holds the item relation/edge.
	ItemTable = "shopping_list_items"
	// ItemInverseTable is the table name for the Item entity.
	// It exists in this package in order to avoid circular dependency with the "item" package.
	ItemInverseTable = "items"
	// ItemColumn is the table column denoting the item relation/edge.
	ItemColumn = "item_shopping_list"
	// PurchaseTable is the table that holds the purchase relation/edge.
	PurchaseTable = "shopping_list_items"
	// PurchaseInverseTable is the table name for the ShoppingItem entity.
	// It exists in this package in order to avoid circular dependency with the "shoppingitem" package.
	PurchaseInverseTable = "shopping_items"
	// PurchaseColumn is the table column denoting the purchase relation/edge.
	PurchaseColumn = "shopping_item_shopping_list"
)

// Columns holds all SQL columns for shoppinglistitem fields.
var Columns = []string{
	FieldID,
	FieldNote,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "shopping_list_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"item_shopping_list",
	"shopping_item_shopping_list",
	"shopping_list_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NoteValidator is a validator for the "note" field. It is called by the builders before save.
	NoteValidator func(string) error
)
