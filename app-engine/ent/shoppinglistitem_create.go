// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/item"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppingitem"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglist"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglistitem"
)

// ShoppingListItemCreate is the builder for creating a ShoppingListItem entity.
type ShoppingListItemCreate struct {
	config
	mutation *ShoppingListItemMutation
	hooks    []Hook
}

// SetNote sets the "note" field.
func (slic *ShoppingListItemCreate) SetNote(s string) *ShoppingListItemCreate {
	slic.mutation.SetNote(s)
	return slic
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (slic *ShoppingListItemCreate) SetNillableNote(s *string) *ShoppingListItemCreate {
	if s != nil {
		slic.SetNote(*s)
	}
	return slic
}

// SetShoppingListID sets the "shoppingList" edge to the ShoppingList entity by ID.
func (slic *ShoppingListItemCreate) SetShoppingListID(id int) *ShoppingListItemCreate {
	slic.mutation.SetShoppingListID(id)
	return slic
}

// SetShoppingList sets the "shoppingList" edge to the ShoppingList entity.
func (slic *ShoppingListItemCreate) SetShoppingList(s *ShoppingList) *ShoppingListItemCreate {
	return slic.SetShoppingListID(s.ID)
}

// SetItemID sets the "item" edge to the Item entity by ID.
func (slic *ShoppingListItemCreate) SetItemID(id int) *ShoppingListItemCreate {
	slic.mutation.SetItemID(id)
	return slic
}

// SetItem sets the "item" edge to the Item entity.
func (slic *ShoppingListItemCreate) SetItem(i *Item) *ShoppingListItemCreate {
	return slic.SetItemID(i.ID)
}

// SetPurchaseID sets the "purchase" edge to the ShoppingItem entity by ID.
func (slic *ShoppingListItemCreate) SetPurchaseID(id int) *ShoppingListItemCreate {
	slic.mutation.SetPurchaseID(id)
	return slic
}

// SetNillablePurchaseID sets the "purchase" edge to the ShoppingItem entity by ID if the given value is not nil.
func (slic *ShoppingListItemCreate) SetNillablePurchaseID(id *int) *ShoppingListItemCreate {
	if id != nil {
		slic = slic.SetPurchaseID(*id)
	}
	return slic
}

// SetPurchase sets the "purchase" edge to the ShoppingItem entity.
func (slic *ShoppingListItemCreate) SetPurchase(s *ShoppingItem) *ShoppingListItemCreate {
	return slic.SetPurchaseID(s.ID)
}

// Mutation returns the ShoppingListItemMutation object of the builder.
func (slic *ShoppingListItemCreate) Mutation() *ShoppingListItemMutation {
	return slic.mutation
}

// Save creates the ShoppingListItem in the database.
func (slic *ShoppingListItemCreate) Save(ctx context.Context) (*ShoppingListItem, error) {
	var (
		err  error
		node *ShoppingListItem
	)
	if len(slic.hooks) == 0 {
		if err = slic.check(); err != nil {
			return nil, err
		}
		node, err = slic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingListItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = slic.check(); err != nil {
				return nil, err
			}
			slic.mutation = mutation
			if node, err = slic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(slic.hooks) - 1; i >= 0; i-- {
			if slic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (slic *ShoppingListItemCreate) SaveX(ctx context.Context) *ShoppingListItem {
	v, err := slic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slic *ShoppingListItemCreate) Exec(ctx context.Context) error {
	_, err := slic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slic *ShoppingListItemCreate) ExecX(ctx context.Context) {
	if err := slic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slic *ShoppingListItemCreate) check() error {
	if v, ok := slic.mutation.Note(); ok {
		if err := shoppinglistitem.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "note": %w`, err)}
		}
	}
	if _, ok := slic.mutation.ShoppingListID(); !ok {
		return &ValidationError{Name: "shoppingList", err: errors.New("ent: missing required edge \"shoppingList\"")}
	}
	if _, ok := slic.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item", err: errors.New("ent: missing required edge \"item\"")}
	}
	return nil
}

func (slic *ShoppingListItemCreate) sqlSave(ctx context.Context) (*ShoppingListItem, error) {
	_node, _spec := slic.createSpec()
	if err := sqlgraph.CreateNode(ctx, slic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (slic *ShoppingListItemCreate) createSpec() (*ShoppingListItem, *sqlgraph.CreateSpec) {
	var (
		_node = &ShoppingListItem{config: slic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: shoppinglistitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shoppinglistitem.FieldID,
			},
		}
	)
	if value, ok := slic.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shoppinglistitem.FieldNote,
		})
		_node.Note = value
	}
	if nodes := slic.mutation.ShoppingListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppinglistitem.ShoppingListTable,
			Columns: []string{shoppinglistitem.ShoppingListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppinglist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shopping_list_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slic.mutation.ItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppinglistitem.ItemTable,
			Columns: []string{shoppinglistitem.ItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.item_shopping_list = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slic.mutation.PurchaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppinglistitem.PurchaseTable,
			Columns: []string{shoppinglistitem.PurchaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppingitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shopping_item_shopping_list = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShoppingListItemCreateBulk is the builder for creating many ShoppingListItem entities in bulk.
type ShoppingListItemCreateBulk struct {
	config
	builders []*ShoppingListItemCreate
}

// Save creates the ShoppingListItem entities in the database.
func (slicb *ShoppingListItemCreateBulk) Save(ctx context.Context) ([]*ShoppingListItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(slicb.builders))
	nodes := make([]*ShoppingListItem, len(slicb.builders))
	mutators := make([]Mutator, len(slicb.builders))
	for i := range slicb.builders {
		func(i int, root context.Context) {
			builder := slicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShoppingListItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slicb *ShoppingListItemCreateBulk) SaveX(ctx context.Context) []*ShoppingListItem {
	v, err := slicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slicb *ShoppingListItemCreateBulk) Exec(ctx context.Context) error {
	_, err := slicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slicb *ShoppingListItemCreateBulk) ExecX(ctx context.Context) {
	if err := slicb.Exec(ctx); err != nil {
		panic(err)
	}
}
