// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/account"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountinvite"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountmember"
	"github.com/kingzbauer/shilingi/app-engine/ent/user"
)

// AccountMemberCreate is the builder for creating a AccountMember entity.
type AccountMemberCreate struct {
	config
	mutation *AccountMemberMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (amc *AccountMemberCreate) SetCreateTime(t time.Time) *AccountMemberCreate {
	amc.mutation.SetCreateTime(t)
	return amc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (amc *AccountMemberCreate) SetNillableCreateTime(t *time.Time) *AccountMemberCreate {
	if t != nil {
		amc.SetCreateTime(*t)
	}
	return amc
}

// SetUpdateTime sets the "update_time" field.
func (amc *AccountMemberCreate) SetUpdateTime(t time.Time) *AccountMemberCreate {
	amc.mutation.SetUpdateTime(t)
	return amc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (amc *AccountMemberCreate) SetNillableUpdateTime(t *time.Time) *AccountMemberCreate {
	if t != nil {
		amc.SetUpdateTime(*t)
	}
	return amc
}

// SetType sets the "type" field.
func (amc *AccountMemberCreate) SetType(a accountmember.Type) *AccountMemberCreate {
	amc.mutation.SetType(a)
	return amc
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (amc *AccountMemberCreate) SetAccountID(id int) *AccountMemberCreate {
	amc.mutation.SetAccountID(id)
	return amc
}

// SetAccount sets the "account" edge to the Account entity.
func (amc *AccountMemberCreate) SetAccount(a *Account) *AccountMemberCreate {
	return amc.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (amc *AccountMemberCreate) SetUserID(id int) *AccountMemberCreate {
	amc.mutation.SetUserID(id)
	return amc
}

// SetUser sets the "user" edge to the User entity.
func (amc *AccountMemberCreate) SetUser(u *User) *AccountMemberCreate {
	return amc.SetUserID(u.ID)
}

// AddInviteIDs adds the "invite" edge to the AccountInvite entity by IDs.
func (amc *AccountMemberCreate) AddInviteIDs(ids ...int) *AccountMemberCreate {
	amc.mutation.AddInviteIDs(ids...)
	return amc
}

// AddInvite adds the "invite" edges to the AccountInvite entity.
func (amc *AccountMemberCreate) AddInvite(a ...*AccountInvite) *AccountMemberCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amc.AddInviteIDs(ids...)
}

// Mutation returns the AccountMemberMutation object of the builder.
func (amc *AccountMemberCreate) Mutation() *AccountMemberMutation {
	return amc.mutation
}

// Save creates the AccountMember in the database.
func (amc *AccountMemberCreate) Save(ctx context.Context) (*AccountMember, error) {
	var (
		err  error
		node *AccountMember
	)
	amc.defaults()
	if len(amc.hooks) == 0 {
		if err = amc.check(); err != nil {
			return nil, err
		}
		node, err = amc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMemberMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = amc.check(); err != nil {
				return nil, err
			}
			amc.mutation = mutation
			if node, err = amc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(amc.hooks) - 1; i >= 0; i-- {
			if amc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = amc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, amc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AccountMemberCreate) SaveX(ctx context.Context) *AccountMember {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AccountMemberCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AccountMemberCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AccountMemberCreate) defaults() {
	if _, ok := amc.mutation.CreateTime(); !ok {
		v := accountmember.DefaultCreateTime()
		amc.mutation.SetCreateTime(v)
	}
	if _, ok := amc.mutation.UpdateTime(); !ok {
		v := accountmember.DefaultUpdateTime()
		amc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AccountMemberCreate) check() error {
	if _, ok := amc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := amc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := amc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if v, ok := amc.mutation.GetType(); ok {
		if err := accountmember.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "type": %w`, err)}
		}
	}
	if _, ok := amc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New("ent: missing required edge \"account\"")}
	}
	if _, ok := amc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	return nil
}

func (amc *AccountMemberCreate) sqlSave(ctx context.Context) (*AccountMember, error) {
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (amc *AccountMemberCreate) createSpec() (*AccountMember, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountMember{config: amc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accountmember.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountmember.FieldID,
			},
		}
	)
	if value, ok := amc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountmember.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := amc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountmember.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := amc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountmember.FieldType,
		})
		_node.Type = value
	}
	if nodes := amc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.AccountTable,
			Columns: []string{accountmember.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_members = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountmember.UserTable,
			Columns: []string{accountmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_memberships = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amc.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accountmember.InviteTable,
			Columns: []string{accountmember.InviteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountinvite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountMemberCreateBulk is the builder for creating many AccountMember entities in bulk.
type AccountMemberCreateBulk struct {
	config
	builders []*AccountMemberCreate
}

// Save creates the AccountMember entities in the database.
func (amcb *AccountMemberCreateBulk) Save(ctx context.Context) ([]*AccountMember, error) {
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AccountMember, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AccountMemberCreateBulk) SaveX(ctx context.Context) []*AccountMember {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AccountMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AccountMemberCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}
