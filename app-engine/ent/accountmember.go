// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kingzbauer/shilingi/app-engine/ent/account"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountmember"
	"github.com/kingzbauer/shilingi/app-engine/ent/user"
)

// AccountMember is the model entity for the AccountMember schema.
type AccountMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Type holds the value of the "type" field.
	Type accountmember.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountMemberQuery when eager-loading is set.
	Edges            AccountMemberEdges `json:"edges"`
	account_members  *int
	user_memberships *int
}

// AccountMemberEdges holds the relations/edges for other nodes in the graph.
type AccountMemberEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Invite holds the value of the invite edge.
	Invite []*AccountInvite `json:"invite,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountMemberEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountMemberEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// InviteOrErr returns the Invite value or an error if the edge
// was not loaded in eager-loading.
func (e AccountMemberEdges) InviteOrErr() ([]*AccountInvite, error) {
	if e.loadedTypes[2] {
		return e.Invite, nil
	}
	return nil, &NotLoadedError{edge: "invite"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountMember) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accountmember.FieldID:
			values[i] = new(sql.NullInt64)
		case accountmember.FieldType:
			values[i] = new(sql.NullString)
		case accountmember.FieldCreateTime, accountmember.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case accountmember.ForeignKeys[0]: // account_members
			values[i] = new(sql.NullInt64)
		case accountmember.ForeignKeys[1]: // user_memberships
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccountMember", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountMember fields.
func (am *AccountMember) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accountmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = int(value.Int64)
		case accountmember.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				am.CreateTime = value.Time
			}
		case accountmember.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				am.UpdateTime = value.Time
			}
		case accountmember.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				am.Type = accountmember.Type(value.String)
			}
		case accountmember.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_members", value)
			} else if value.Valid {
				am.account_members = new(int)
				*am.account_members = int(value.Int64)
			}
		case accountmember.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_memberships", value)
			} else if value.Valid {
				am.user_memberships = new(int)
				*am.user_memberships = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the AccountMember entity.
func (am *AccountMember) QueryAccount() *AccountQuery {
	return (&AccountMemberClient{config: am.config}).QueryAccount(am)
}

// QueryUser queries the "user" edge of the AccountMember entity.
func (am *AccountMember) QueryUser() *UserQuery {
	return (&AccountMemberClient{config: am.config}).QueryUser(am)
}

// QueryInvite queries the "invite" edge of the AccountMember entity.
func (am *AccountMember) QueryInvite() *AccountInviteQuery {
	return (&AccountMemberClient{config: am.config}).QueryInvite(am)
}

// Update returns a builder for updating this AccountMember.
// Note that you need to call AccountMember.Unwrap() before calling this method if this AccountMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AccountMember) Update() *AccountMemberUpdateOne {
	return (&AccountMemberClient{config: am.config}).UpdateOne(am)
}

// Unwrap unwraps the AccountMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AccountMember) Unwrap() *AccountMember {
	tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountMember is not a transactional entity")
	}
	am.config.driver = tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AccountMember) String() string {
	var builder strings.Builder
	builder.WriteString("AccountMember(")
	builder.WriteString(fmt.Sprintf("id=%v", am.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(am.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(am.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", am.Type))
	builder.WriteByte(')')
	return builder.String()
}

// AccountMembers is a parsable slice of AccountMember.
type AccountMembers []*AccountMember

func (am AccountMembers) config(cfg config) {
	for _i := range am {
		am[_i].config = cfg
	}
}
