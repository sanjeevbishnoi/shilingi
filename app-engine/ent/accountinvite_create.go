// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/account"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountinvite"
	"github.com/kingzbauer/shilingi/app-engine/ent/accountmember"
	"github.com/kingzbauer/shilingi/app-engine/ent/user"
)

// AccountInviteCreate is the builder for creating a AccountInvite entity.
type AccountInviteCreate struct {
	config
	mutation *AccountInviteMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (aic *AccountInviteCreate) SetCreateTime(t time.Time) *AccountInviteCreate {
	aic.mutation.SetCreateTime(t)
	return aic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (aic *AccountInviteCreate) SetNillableCreateTime(t *time.Time) *AccountInviteCreate {
	if t != nil {
		aic.SetCreateTime(*t)
	}
	return aic
}

// SetUpdateTime sets the "update_time" field.
func (aic *AccountInviteCreate) SetUpdateTime(t time.Time) *AccountInviteCreate {
	aic.mutation.SetUpdateTime(t)
	return aic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (aic *AccountInviteCreate) SetNillableUpdateTime(t *time.Time) *AccountInviteCreate {
	if t != nil {
		aic.SetUpdateTime(*t)
	}
	return aic
}

// SetEmail sets the "email" field.
func (aic *AccountInviteCreate) SetEmail(s string) *AccountInviteCreate {
	aic.mutation.SetEmail(s)
	return aic
}

// SetStatus sets the "status" field.
func (aic *AccountInviteCreate) SetStatus(a accountinvite.Status) *AccountInviteCreate {
	aic.mutation.SetStatus(a)
	return aic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aic *AccountInviteCreate) SetNillableStatus(a *accountinvite.Status) *AccountInviteCreate {
	if a != nil {
		aic.SetStatus(*a)
	}
	return aic
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (aic *AccountInviteCreate) SetAccountID(id int) *AccountInviteCreate {
	aic.mutation.SetAccountID(id)
	return aic
}

// SetAccount sets the "account" edge to the Account entity.
func (aic *AccountInviteCreate) SetAccount(a *Account) *AccountInviteCreate {
	return aic.SetAccountID(a.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (aic *AccountInviteCreate) SetUserID(id int) *AccountInviteCreate {
	aic.mutation.SetUserID(id)
	return aic
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (aic *AccountInviteCreate) SetNillableUserID(id *int) *AccountInviteCreate {
	if id != nil {
		aic = aic.SetUserID(*id)
	}
	return aic
}

// SetUser sets the "user" edge to the User entity.
func (aic *AccountInviteCreate) SetUser(u *User) *AccountInviteCreate {
	return aic.SetUserID(u.ID)
}

// SetMemberID sets the "member" edge to the AccountMember entity by ID.
func (aic *AccountInviteCreate) SetMemberID(id int) *AccountInviteCreate {
	aic.mutation.SetMemberID(id)
	return aic
}

// SetNillableMemberID sets the "member" edge to the AccountMember entity by ID if the given value is not nil.
func (aic *AccountInviteCreate) SetNillableMemberID(id *int) *AccountInviteCreate {
	if id != nil {
		aic = aic.SetMemberID(*id)
	}
	return aic
}

// SetMember sets the "member" edge to the AccountMember entity.
func (aic *AccountInviteCreate) SetMember(a *AccountMember) *AccountInviteCreate {
	return aic.SetMemberID(a.ID)
}

// Mutation returns the AccountInviteMutation object of the builder.
func (aic *AccountInviteCreate) Mutation() *AccountInviteMutation {
	return aic.mutation
}

// Save creates the AccountInvite in the database.
func (aic *AccountInviteCreate) Save(ctx context.Context) (*AccountInvite, error) {
	var (
		err  error
		node *AccountInvite
	)
	aic.defaults()
	if len(aic.hooks) == 0 {
		if err = aic.check(); err != nil {
			return nil, err
		}
		node, err = aic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountInviteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aic.check(); err != nil {
				return nil, err
			}
			aic.mutation = mutation
			if node, err = aic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aic.hooks) - 1; i >= 0; i-- {
			if aic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aic *AccountInviteCreate) SaveX(ctx context.Context) *AccountInvite {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *AccountInviteCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *AccountInviteCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aic *AccountInviteCreate) defaults() {
	if _, ok := aic.mutation.CreateTime(); !ok {
		v := accountinvite.DefaultCreateTime()
		aic.mutation.SetCreateTime(v)
	}
	if _, ok := aic.mutation.UpdateTime(); !ok {
		v := accountinvite.DefaultUpdateTime()
		aic.mutation.SetUpdateTime(v)
	}
	if _, ok := aic.mutation.Status(); !ok {
		v := accountinvite.DefaultStatus
		aic.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *AccountInviteCreate) check() error {
	if _, ok := aic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	if _, ok := aic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "update_time"`)}
	}
	if _, ok := aic.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "email"`)}
	}
	if _, ok := aic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if v, ok := aic.mutation.Status(); ok {
		if err := accountinvite.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "status": %w`, err)}
		}
	}
	if _, ok := aic.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New("ent: missing required edge \"account\"")}
	}
	return nil
}

func (aic *AccountInviteCreate) sqlSave(ctx context.Context) (*AccountInvite, error) {
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (aic *AccountInviteCreate) createSpec() (*AccountInvite, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountInvite{config: aic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accountinvite.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountinvite.FieldID,
			},
		}
	)
	if value, ok := aic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountinvite.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := aic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accountinvite.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := aic.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountinvite.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := aic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: accountinvite.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := aic.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.AccountTable,
			Columns: []string{accountinvite.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_invites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.UserTable,
			Columns: []string{accountinvite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_invites = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountinvite.MemberTable,
			Columns: []string{accountinvite.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountmember.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_member_invite = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccountInviteCreateBulk is the builder for creating many AccountInvite entities in bulk.
type AccountInviteCreateBulk struct {
	config
	builders []*AccountInviteCreate
}

// Save creates the AccountInvite entities in the database.
func (aicb *AccountInviteCreateBulk) Save(ctx context.Context) ([]*AccountInvite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*AccountInvite, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountInviteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *AccountInviteCreateBulk) SaveX(ctx context.Context) []*AccountInvite {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *AccountInviteCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *AccountInviteCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
