// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (i *Item) Purchases(ctx context.Context) ([]*ShoppingItem, error) {
	result, err := i.Edges.PurchasesOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryPurchases().All(ctx)
	}
	return result, err
}

func (i *Item) Tags(ctx context.Context) ([]*Tag, error) {
	result, err := i.Edges.TagsOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryTags().All(ctx)
	}
	return result, err
}

func (i *Item) Sublabel(ctx context.Context) (*SubLabel, error) {
	result, err := i.Edges.SublabelOrErr()
	if IsNotLoaded(err) {
		result, err = i.QuerySublabel().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (s *Shopping) Items(ctx context.Context) ([]*ShoppingItem, error) {
	result, err := s.Edges.ItemsOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryItems().All(ctx)
	}
	return result, err
}

func (s *Shopping) Vendor(ctx context.Context) (*Vendor, error) {
	result, err := s.Edges.VendorOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryVendor().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (si *ShoppingItem) Item(ctx context.Context) (*Item, error) {
	result, err := si.Edges.ItemOrErr()
	if IsNotLoaded(err) {
		result, err = si.QueryItem().Only(ctx)
	}
	return result, err
}

func (si *ShoppingItem) Shopping(ctx context.Context) (*Shopping, error) {
	result, err := si.Edges.ShoppingOrErr()
	if IsNotLoaded(err) {
		result, err = si.QueryShopping().Only(ctx)
	}
	return result, err
}

func (sl *SubLabel) Parent(ctx context.Context) (*Tag, error) {
	result, err := sl.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sl *SubLabel) Items(ctx context.Context) ([]*Item, error) {
	result, err := sl.Edges.ItemsOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QueryItems().All(ctx)
	}
	return result, err
}

func (t *Tag) Items(ctx context.Context) ([]*Item, error) {
	result, err := t.Edges.ItemsOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryItems().All(ctx)
	}
	return result, err
}

func (t *Tag) Children(ctx context.Context) ([]*SubLabel, error) {
	result, err := t.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryChildren().All(ctx)
	}
	return result, err
}

func (v *Vendor) Purchases(ctx context.Context) ([]*Shopping, error) {
	result, err := v.Edges.PurchasesOrErr()
	if IsNotLoaded(err) {
		result, err = v.QueryPurchases().All(ctx)
	}
	return result, err
}
