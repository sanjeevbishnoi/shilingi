// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/kingzbauer/shilingi/app-engine/ent/sublabel"
	"github.com/kingzbauer/shilingi/app-engine/ent/tag"
)

// SubLabel is the model entity for the SubLabel schema.
type SubLabel struct {
	config `conform:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	// Label name
	Name string `json:"name,omitempty" conform:"trim"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubLabelQuery when eager-loading is set.
	Edges        SubLabelEdges `json:"edges"`
	tag_children *int
}

// SubLabelEdges holds the relations/edges for other nodes in the graph.
type SubLabelEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Tag `json:"parent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubLabelEdges) ParentOrErr() (*Tag, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubLabel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sublabel.FieldID:
			values[i] = new(sql.NullInt64)
		case sublabel.FieldName:
			values[i] = new(sql.NullString)
		case sublabel.FieldCreateTime, sublabel.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case sublabel.ForeignKeys[0]: // tag_children
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubLabel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubLabel fields.
func (sl *SubLabel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sublabel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case sublabel.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sl.CreateTime = value.Time
			}
		case sublabel.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sl.UpdateTime = value.Time
			}
		case sublabel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sl.Name = value.String
			}
		case sublabel.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tag_children", value)
			} else if value.Valid {
				sl.tag_children = new(int)
				*sl.tag_children = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the SubLabel entity.
func (sl *SubLabel) QueryParent() *TagQuery {
	return (&SubLabelClient{config: sl.config}).QueryParent(sl)
}

// Update returns a builder for updating this SubLabel.
// Note that you need to call SubLabel.Unwrap() before calling this method if this SubLabel
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SubLabel) Update() *SubLabelUpdateOne {
	return (&SubLabelClient{config: sl.config}).UpdateOne(sl)
}

// Unwrap unwraps the SubLabel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SubLabel) Unwrap() *SubLabel {
	tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubLabel is not a transactional entity")
	}
	sl.config.driver = tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SubLabel) String() string {
	var builder strings.Builder
	builder.WriteString("SubLabel(")
	builder.WriteString(fmt.Sprintf("id=%v", sl.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(sl.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(sl.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(sl.Name)
	builder.WriteByte(')')
	return builder.String()
}

// SubLabels is a parsable slice of SubLabel.
type SubLabels []*SubLabel

func (sl SubLabels) config(cfg config) {
	for _i := range sl {
		sl[_i].config = cfg
	}
}
