// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kingzbauer/shilingi/app-engine/ent/predicate"
	"github.com/kingzbauer/shilingi/app-engine/ent/shopping"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglist"
	"github.com/kingzbauer/shilingi/app-engine/ent/shoppinglistitem"
)

// ShoppingListUpdate is the builder for updating ShoppingList entities.
type ShoppingListUpdate struct {
	config
	hooks    []Hook
	mutation *ShoppingListMutation
}

// Where appends a list predicates to the ShoppingListUpdate builder.
func (slu *ShoppingListUpdate) Where(ps ...predicate.ShoppingList) *ShoppingListUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetName sets the "name" field.
func (slu *ShoppingListUpdate) SetName(s string) *ShoppingListUpdate {
	slu.mutation.SetName(s)
	return slu
}

// AddItemIDs adds the "items" edge to the ShoppingListItem entity by IDs.
func (slu *ShoppingListUpdate) AddItemIDs(ids ...int) *ShoppingListUpdate {
	slu.mutation.AddItemIDs(ids...)
	return slu
}

// AddItems adds the "items" edges to the ShoppingListItem entity.
func (slu *ShoppingListUpdate) AddItems(s ...*ShoppingListItem) *ShoppingListUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return slu.AddItemIDs(ids...)
}

// SetPurchasesID sets the "purchases" edge to the Shopping entity by ID.
func (slu *ShoppingListUpdate) SetPurchasesID(id int) *ShoppingListUpdate {
	slu.mutation.SetPurchasesID(id)
	return slu
}

// SetNillablePurchasesID sets the "purchases" edge to the Shopping entity by ID if the given value is not nil.
func (slu *ShoppingListUpdate) SetNillablePurchasesID(id *int) *ShoppingListUpdate {
	if id != nil {
		slu = slu.SetPurchasesID(*id)
	}
	return slu
}

// SetPurchases sets the "purchases" edge to the Shopping entity.
func (slu *ShoppingListUpdate) SetPurchases(s *Shopping) *ShoppingListUpdate {
	return slu.SetPurchasesID(s.ID)
}

// Mutation returns the ShoppingListMutation object of the builder.
func (slu *ShoppingListUpdate) Mutation() *ShoppingListMutation {
	return slu.mutation
}

// ClearItems clears all "items" edges to the ShoppingListItem entity.
func (slu *ShoppingListUpdate) ClearItems() *ShoppingListUpdate {
	slu.mutation.ClearItems()
	return slu
}

// RemoveItemIDs removes the "items" edge to ShoppingListItem entities by IDs.
func (slu *ShoppingListUpdate) RemoveItemIDs(ids ...int) *ShoppingListUpdate {
	slu.mutation.RemoveItemIDs(ids...)
	return slu
}

// RemoveItems removes "items" edges to ShoppingListItem entities.
func (slu *ShoppingListUpdate) RemoveItems(s ...*ShoppingListItem) *ShoppingListUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return slu.RemoveItemIDs(ids...)
}

// ClearPurchases clears the "purchases" edge to the Shopping entity.
func (slu *ShoppingListUpdate) ClearPurchases() *ShoppingListUpdate {
	slu.mutation.ClearPurchases()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *ShoppingListUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	slu.defaults()
	if len(slu.hooks) == 0 {
		affected, err = slu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			slu.mutation = mutation
			affected, err = slu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(slu.hooks) - 1; i >= 0; i-- {
			if slu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = slu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (slu *ShoppingListUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *ShoppingListUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *ShoppingListUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slu *ShoppingListUpdate) defaults() {
	if _, ok := slu.mutation.UpdateTime(); !ok {
		v := shoppinglist.UpdateDefaultUpdateTime()
		slu.mutation.SetUpdateTime(v)
	}
}

func (slu *ShoppingListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shoppinglist.Table,
			Columns: shoppinglist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shoppinglist.FieldID,
			},
		},
	}
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shoppinglist.FieldUpdateTime,
		})
	}
	if value, ok := slu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shoppinglist.FieldName,
		})
	}
	if slu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppinglist.ItemsTable,
			Columns: []string{shoppinglist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppinglistitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !slu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppinglist.ItemsTable,
			Columns: []string{shoppinglist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppinglistitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppinglist.ItemsTable,
			Columns: []string{shoppinglist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppinglistitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if slu.mutation.PurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppinglist.PurchasesTable,
			Columns: []string{shoppinglist.PurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.PurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppinglist.PurchasesTable,
			Columns: []string{shoppinglist.PurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppinglist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ShoppingListUpdateOne is the builder for updating a single ShoppingList entity.
type ShoppingListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShoppingListMutation
}

// SetName sets the "name" field.
func (sluo *ShoppingListUpdateOne) SetName(s string) *ShoppingListUpdateOne {
	sluo.mutation.SetName(s)
	return sluo
}

// AddItemIDs adds the "items" edge to the ShoppingListItem entity by IDs.
func (sluo *ShoppingListUpdateOne) AddItemIDs(ids ...int) *ShoppingListUpdateOne {
	sluo.mutation.AddItemIDs(ids...)
	return sluo
}

// AddItems adds the "items" edges to the ShoppingListItem entity.
func (sluo *ShoppingListUpdateOne) AddItems(s ...*ShoppingListItem) *ShoppingListUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sluo.AddItemIDs(ids...)
}

// SetPurchasesID sets the "purchases" edge to the Shopping entity by ID.
func (sluo *ShoppingListUpdateOne) SetPurchasesID(id int) *ShoppingListUpdateOne {
	sluo.mutation.SetPurchasesID(id)
	return sluo
}

// SetNillablePurchasesID sets the "purchases" edge to the Shopping entity by ID if the given value is not nil.
func (sluo *ShoppingListUpdateOne) SetNillablePurchasesID(id *int) *ShoppingListUpdateOne {
	if id != nil {
		sluo = sluo.SetPurchasesID(*id)
	}
	return sluo
}

// SetPurchases sets the "purchases" edge to the Shopping entity.
func (sluo *ShoppingListUpdateOne) SetPurchases(s *Shopping) *ShoppingListUpdateOne {
	return sluo.SetPurchasesID(s.ID)
}

// Mutation returns the ShoppingListMutation object of the builder.
func (sluo *ShoppingListUpdateOne) Mutation() *ShoppingListMutation {
	return sluo.mutation
}

// ClearItems clears all "items" edges to the ShoppingListItem entity.
func (sluo *ShoppingListUpdateOne) ClearItems() *ShoppingListUpdateOne {
	sluo.mutation.ClearItems()
	return sluo
}

// RemoveItemIDs removes the "items" edge to ShoppingListItem entities by IDs.
func (sluo *ShoppingListUpdateOne) RemoveItemIDs(ids ...int) *ShoppingListUpdateOne {
	sluo.mutation.RemoveItemIDs(ids...)
	return sluo
}

// RemoveItems removes "items" edges to ShoppingListItem entities.
func (sluo *ShoppingListUpdateOne) RemoveItems(s ...*ShoppingListItem) *ShoppingListUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sluo.RemoveItemIDs(ids...)
}

// ClearPurchases clears the "purchases" edge to the Shopping entity.
func (sluo *ShoppingListUpdateOne) ClearPurchases() *ShoppingListUpdateOne {
	sluo.mutation.ClearPurchases()
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *ShoppingListUpdateOne) Select(field string, fields ...string) *ShoppingListUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated ShoppingList entity.
func (sluo *ShoppingListUpdateOne) Save(ctx context.Context) (*ShoppingList, error) {
	var (
		err  error
		node *ShoppingList
	)
	sluo.defaults()
	if len(sluo.hooks) == 0 {
		node, err = sluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShoppingListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sluo.mutation = mutation
			node, err = sluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sluo.hooks) - 1; i >= 0; i-- {
			if sluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *ShoppingListUpdateOne) SaveX(ctx context.Context) *ShoppingList {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *ShoppingListUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *ShoppingListUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sluo *ShoppingListUpdateOne) defaults() {
	if _, ok := sluo.mutation.UpdateTime(); !ok {
		v := shoppinglist.UpdateDefaultUpdateTime()
		sluo.mutation.SetUpdateTime(v)
	}
}

func (sluo *ShoppingListUpdateOne) sqlSave(ctx context.Context) (_node *ShoppingList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   shoppinglist.Table,
			Columns: shoppinglist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shoppinglist.FieldID,
			},
		},
	}
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ShoppingList.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shoppinglist.FieldID)
		for _, f := range fields {
			if !shoppinglist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shoppinglist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: shoppinglist.FieldUpdateTime,
		})
	}
	if value, ok := sluo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: shoppinglist.FieldName,
		})
	}
	if sluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppinglist.ItemsTable,
			Columns: []string{shoppinglist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppinglistitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !sluo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppinglist.ItemsTable,
			Columns: []string{shoppinglist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppinglistitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   shoppinglist.ItemsTable,
			Columns: []string{shoppinglist.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shoppinglistitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sluo.mutation.PurchasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppinglist.PurchasesTable,
			Columns: []string{shoppinglist.PurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.PurchasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppinglist.PurchasesTable,
			Columns: []string{shoppinglist.PurchasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopping.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShoppingList{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppinglist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
